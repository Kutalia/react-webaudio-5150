{"version":3,"sources":["features/tubeAmp/profile.ts","helpers/utils.ts","features/pedal/index.tsx","App.tsx","features/tubeAmp/index.tsx","features/cabinet/index.tsx","features/diagram/CustomNodeWidget.tsx","features/diagram/CustomPortModel.ts","features/diagram/CustomNodeModel.ts","features/diagram/CustomNodeFactory.tsx","features/diagram/index.tsx","features/pluginsTray/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ProfileProps","stopEventPropagation","e","stopPropagation","Pedal","id","sourceUrl","context","factory","compiler","onPluginReady","pluginNodes","useState","node","setNode","fetchRef","useRef","useEffect","current","fetch","process","then","resp","text","compileNode","sliderParams","fDescriptor","filter","type","className","fJSONDsp","name","onMouseDown","map","address","init","label","min","max","step","htmlFor","toUpperCase","size","angleOffset","angleRange","value","onChange","val","setParamValue","handleChangeControl","arcWidth","color","radius","width","marginBottom","InputModes","tubeAmpAddr","getControlsByType","ctrlType","TubeAmp","profile","setProfile","resamplerReady","setResamplerReady","faustNode","SpeexResampler","initPromise","response","arrayBuffer","buffer","bufferPosition","profileBuffer","slice","signature","Uint8Array","testStr","i","length","charCodeAt","profileVersion","Uint32Array","Float32Array","reduce","prevVal","currentVal","index","Object","assign","version","impulseHeader","impulseHeaderArr","Int32Array","impulseSampleRate","impulseSamplesSize","impulseBuffer","byteLength","preampConvolver","ConvolverNode","resampler","sampleRate","bufferArr","Int16Array","res","processChunk","resampledArr","audioBuffer","createBuffer","audioData","getChannelData","nentryParams","forEach","descriptor","r","cx","cy","height","positions","irs","Cabinet","audioContext","onCabReady","position","setPosition","decodeAudioData","decoded","cabConvolver","onClick","prevPosition","alt","src","Wrapper","styled","div","CustomNodeWidget","InPort","this","props","getPort","OutPort","plugin","port","engine","React","Component","CustomPortModel","PathFindingLinkModel","DefaultPortModel","CustomNodeModel","pluginIndex","addPort","NodeModel","CustomNodeFactory","event","model","AbstractReactFactory","removePortLinks","linkToExclude","links","getLinks","keys","entries","entry","link","remove","Diagram","plugins","setPluginsOrder","pluginsOrder","addPlugin","setEngine","pluginsRef","pluginsOrderRef","diagramEngine","createEngine","registerDefaultZoomCanvasAction","getNodeFactories","registerFactory","pluginsOrderChanged","isEqual","pluginAdded","getModel","renderedPluginsLength","newPluginIndex","getNodes","outputNode","n","DefaultNodeModel","getOptions","outputPort","outputLink","connectedToOutputNodePort","getTargetPort","getNode","getSourcePort","push","addAll","nodes","pathfinding","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","disableDeleteListener","eventWillFire","function","registerListener","DiagramModel","setModel","listener","eventDidFire","newLink","sourcePort","isCreated","targetPortChanged","getParent","signalChain","inputNodeID","adjacentLinks","getSignalChain","getID","state","getStateMachine","getCurrentState","dragCanvas","config","allowDrag","setTimeout","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","redistribute","calculateRoutingMatrix","repaintCanvas","onDrop","data","dataTransfer","getData","onDragOver","preventDefault","PluginsTrayWidget","draggable","onDragStart","setData","disconnectPlugins","disconnect","availablePlugins","initialState","lineInStreamSource","diTrackStreamSource","inputMode","pluginsHistory","allPluginsTailNode","faustCompiler","faustFactory","faustCode","App","streamSource","setState","diAudioRef","Audio","resumeAudioContext","resume","Promise","resolve","a","AudioContext","latencyHint","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","stream","createMediaStreamSource","prevState","MIC","FaustModule","module","Faust","createCompiler","createLibFaust","createMonoFactory","DI","useCallback","source","lastPluginOccurance","order","sort","b","undefined","indexOf","destination","getPluginElement","pluginSrc","renderingPluginIdsRef","useMemo","pluginId","uuidv4","possiblePluginEntry","connect","pluginEntries","orderedPlugins","reverse","prevPlugin","currentPlugin","pluginTailNode","prevNode","currentNode","firstNode","shouldLoadNewPlugin","includes","newPluginsOrder","find","_","disabled","controls","ref","onPlay","audioElement","createMediaElementSource","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9de2435d.chunk.js","sourcesContent":["// Structure with tubeAmp model\n// parameters.\n\nexport enum ProfileProps {\n    signature, version, preamp_level, preamp_bias, preamp_Kreg, preamp_Upor,\n    tonestack_low_freq, tonestack_low_band, tonestack_middle_freq, tonestack_middle_band, tonestack_high_freq, tonestack_high_band,\n    amp_level, amp_bias, amp_Kreg, amp_Upor, sag_time, sag_coeff, output_level,\n}\n\nexport type ProfilePropTypes = [string, ...number[]];\n\nexport type ProfilePropsUnion = keyof typeof ProfileProps;\n\nexport type Profile = {\n    [k in ProfilePropsUnion]: ProfilePropTypes[typeof ProfileProps[k]]\n}\n\n// export interface Profile\n// {\n//     signature: string; // 4 chars, 4 bytes in total\n    \n//     version: number; // uint32\n    \n//     preamp_level: number; // 4 byte float\n//     preamp_bias: number; // 4 byte float\n//     preamp_Kreg: number; // 4 byte float\n//     preamp_Upor: number; // 4 byte float\n    \n//     tonestack_low_freq: number; // 4 byte float\n//     tonestack_low_band: number; // 4 byte float\n//     tonestack_middle_freq: number; // 4 byte float\n//     tonestack_middle_band: number; // 4 byte float\n//     tonestack_high_freq: number; // 4 byte float\n//     tonestack_high_band: number; // 4 byte float\n    \n//     amp_level: number; // 4 byte float\n//     amp_bias: number; // 4 byte float\n//     amp_Kreg: number; // 4 byte float\n//     amp_Upor: number; // 4 byte float\n    \n//     sag_time: number; // 4 byte float\n//     sag_coeff: number; // 4 byte float\n    \n//     output_level: number; // 4 byte float\n// }\n\nexport const profileSize = 76; // 19 * 4, size in bytes\n\n// structure of\n// impulse response data\n// in *.tapf profile file\n\nexport interface Impulse {\n    sample_rate: number; // 4 byte int\n    channel: number; // 4 byte int\n    sample_count: number; // 4 byte int\n}\n\nexport const impulseSize = 12;\n","import { UIEvent } from 'react'\n\nexport const stopEventPropagation = (e: UIEvent) => {\n    e.stopPropagation();\n};\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef } from 'react';\nimport { Knob, Pointer, Arc, Value } from 'rc-knob';\n\nimport { stopEventPropagation } from '../../helpers/utils';\n\nexport type nodeType = Faust.FaustMonoNode | null;\n\ntype propTypes = {\n  id: string,\n  sourceUrl: string,\n  context: AudioContext | null,\n  factory: Faust.MonoFactory | null,\n  compiler: Faust.Compiler | null,\n  onPluginReady: (nodes: nodeType[], source: string, id: string) => void,\n  pluginNodes?: nodeType[],\n};\n\ntype descriptorType = {\n  address: string,\n  index: number,\n  init: number,\n  label: string,\n  max: number,\n  min: number,\n  step: number,\n  type: string,\n};\n\nconst Pedal = ({ id, sourceUrl, context, factory, compiler, onPluginReady, pluginNodes, }: propTypes) => {\n  const [node, setNode] = useState<nodeType>(pluginNodes ? pluginNodes[0] : null);\n\n  const fetchRef = useRef(false);\n\n  useEffect(() => {\n    if (factory && context && compiler && !node && !fetchRef.current) {\n      fetch(process.env.PUBLIC_URL + '/' + sourceUrl).then(resp => resp.text()).then(text => {\n        fetchRef.current = true;\n        factory.compileNode(context, 'Pedal_' + id, compiler, text, '-ftz 2', false, 128).then(node => {\n          setNode(node);\n          onPluginReady([node], sourceUrl, id);\n        });\n      });\n    }\n  }, [sourceUrl, context, factory, compiler, onPluginReady, id, node, fetchRef]);\n\n  if (!node) {\n    return <div>Start audio to load the plugin</div>;\n  }\n\n  const sliderParams = (node as any).fDescriptor.filter(({ type }: descriptorType) => type === 'vslider' || type === 'hslider');\n\n  const handleChangeControl = (address: string, val: number) => {\n    node.setParamValue(address, val);\n  };\n\n  return (\n    <div className=\"plugin pedal\">\n      <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\n      <div className=\"knobs-wrapper\" onMouseDown={stopEventPropagation}>\n        {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\n          <div key={address} className=\"knob\">\n            <label htmlFor={address}>{label.toUpperCase()}</label>\n            <Knob\n              size={50}\n              angleOffset={220}\n              angleRange={280}\n              min={min}\n              max={max}\n              value={init || 0.01}\n              onChange={(val: number) => handleChangeControl(address, val)}\n            >\n              <Arc\n                arcWidth={2.5}\n                color=\"#FC5A96\"\n                radius={18.75}\n              />\n              <Pointer\n                width={2.5}\n                radius={20}\n                type=\"circle\"\n                color=\"#180094\"\n              />\n              <Value\n                marginBottom={20}\n                className=\"value\"\n              />\n            </Knob>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n};\n\nexport default Pedal;\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nimport Pedal, { nodeType as pedalNodeType } from './features/pedal';\nimport TubeAmp, { nodeType as tubeAmpNodeType } from './features/tubeAmp';\nimport Cabinet from './features/cabinet';\nimport Diagram from './features/diagram';\nimport PluginsTrayWidget from './features/pluginsTray';\n\ndeclare var FaustModule: any;\n\nenum InputModes {\n  DI,\n  MIC\n}\n\nexport type PluginType = AudioNode | pedalNodeType | tubeAmpNodeType;\ntype PluginsType = Record<string, {\n  source: string;\n  nodes: Array<PluginType>;\n  order: number;\n}>;\n\nfunction disconnectPlugins(plugins: PluginsType) {\n  const pluginNodes = Object.entries(plugins).map(entry => entry[1].nodes);\n\n  pluginNodes.forEach((plugin) => {\n    if (plugin) {\n      plugin.forEach(node => node?.disconnect());\n    }\n  });\n}\n\nconst availablePlugins = ['kpp_distruction.dsp', 'kpp_octaver.dsp', 'kpp_tubeamp.dsp', 'kpp_fuzz.dsp', 'kpp_bluedream.dsp',];\n\ninterface StateType {\n  audioContext: AudioContext | null,\n  lineInStreamSource: MediaStreamAudioSourceNode | null,\n  diTrackStreamSource: MediaElementAudioSourceNode | null,\n  inputMode: InputModes | null,\n  cabConvolver: ConvolverNode | null,\n  pluginsHistory: Array<string>, // filled when new plugins are loaded by source url, doesn't get reduced for caching reasons\n  plugins: PluginsType, // all currently loaded plugins\n  pluginsOrder: Array<number> | null, // plugin indices from pluginsHistory\n  allPluginsTailNode: { node: PluginType; } | null,\n  faustCompiler: Faust.Compiler | null,\n  faustFactory: Faust.MonoFactory | null,\n  faustCode: string,\n}\n\nconst initialState: StateType = {\n  audioContext: null,\n  lineInStreamSource: null,\n  diTrackStreamSource: null,\n  inputMode: null,\n  cabConvolver: null,\n  pluginsHistory: [\n    'kpp_distruction.dsp',\n    // 'kpp_tubeamp.dsp',\n    // 'kpp_octaver.dsp',\n  ],\n  plugins: {},\n  pluginsOrder: null,\n  allPluginsTailNode: null,\n  faustCompiler: null,\n  faustFactory: null,\n  faustCode: '',\n};\n\nfunction App() {\n  const [state, setState] = useState<StateType>(initialState);\n\n  const { audioContext, lineInStreamSource, diTrackStreamSource } = state;\n\n  const diAudioRef = useRef(new Audio());\n\n  function resumeAudioContext(audioContext: AudioContext) {\n    if (audioContext.state === 'suspended' || audioContext.state !== 'running') {\n      return audioContext.resume();\n    }\n    return Promise.resolve();\n  }\n\n  async function initGuitarInputFromLineIn() {\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\n\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        echoCancellation: false,\n        autoGainControl: false,\n        noiseSuppression: false,\n        latency: 0\n      }\n    });\n\n    await resumeAudioContext(audioContext);\n\n    const lineInStreamSource = audioContext.createMediaStreamSource(stream);\n    setState((prevState) => ({\n      ...prevState,\n      audioContext,\n      lineInStreamSource,\n      diTrackStreamSource,\n      inputMode: InputModes.MIC,\n    }));\n  }\n\n  function onDiPlay() {\n    if (diTrackStreamSource) {\n      return;\n    }\n\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\n    const audioElement = diAudioRef.current;\n\n    resumeAudioContext(audioContext).then(() => {\n      const diTrackStreamSource = audioContext.createMediaElementSource(audioElement);\n      setState((prevState) => ({\n        ...prevState,\n        audioContext,\n        lineInStreamSource,\n        diTrackStreamSource,\n        inputMode: InputModes.DI\n      }));\n    });\n  }\n\n  useEffect(() => {\n    FaustModule().then((module: any) => {\n      let compiler = Faust.createCompiler(Faust.createLibFaust(module) as Faust.LibFaust);\n\n      let factory = Faust.createMonoFactory();\n\n      setState((prevState) => ({\n        ...prevState,\n        faustFactory: factory,\n        faustCompiler: compiler,\n      }));\n    });\n  }, []);\n\n  let streamSource: typeof diTrackStreamSource | typeof lineInStreamSource;\n\n  switch (state.inputMode) {\n    case InputModes.DI: streamSource = diTrackStreamSource; break;\n    case InputModes.MIC: streamSource = lineInStreamSource; break;\n    default: streamSource = diTrackStreamSource || lineInStreamSource;\n  }\n\n  const onPluginReady = useCallback((nodes: (pedalNodeType | tubeAmpNodeType)[], source: string, id: string) => {\n    setState(prevState => {\n      const pluginEntries = Object.entries(prevState.plugins);\n      const lastPluginOccurance = (pluginEntries\n        .filter(entry => entry[1].source === source)\n        ?.map(entry => entry[1].order)\n        .sort((a, b) => b - a) || [undefined])[0];\n\n      let order = prevState.pluginsHistory.indexOf(source, typeof lastPluginOccurance === 'number' ? lastPluginOccurance + 1 : undefined);\n      order = order === -1 ? prevState.pluginsHistory.length : order;\n\n      return {\n        ...prevState, plugins: {\n          ...prevState.plugins,\n          [id]: {\n            order,\n            nodes,\n            source,\n          }\n        }\n      };\n    });\n  }, []);\n\n  const onCabReady = useCallback((cabConvolver: ConvolverNode) => {\n    setState(prevState => {\n      if (prevState.cabConvolver && prevState.audioContext && prevState.allPluginsTailNode?.node) {\n        prevState.allPluginsTailNode.node.disconnect(prevState.cabConvolver);\n        prevState.cabConvolver.disconnect(prevState.audioContext.destination);\n      }\n      return { ...prevState, cabConvolver };\n    });\n  }, []);\n\n  const getPluginElement = useCallback((pluginSrc: string, id: string, pluginNodes?: Array<PluginType>): JSX.Element => {\n    return pluginSrc === 'kpp_tubeamp.dsp'\n      ? <TubeAmp id={id} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} pluginNodes={pluginNodes as tubeAmpNodeType[]} />\n      : <Pedal id={id} sourceUrl={pluginSrc} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} pluginNodes={pluginNodes as pedalNodeType[]} />;\n  }, [state.faustFactory, state.faustCompiler, state.audioContext, onPluginReady]);\n\n  const renderingPluginIdsRef = useRef<Array<string>>([]);\n  const plugins = useMemo(() => state.pluginsHistory.map((pluginSrc, index) => {\n    let pluginId: string;\n    if (!renderingPluginIdsRef.current[index]) {\n      pluginId = uuidv4();\n      renderingPluginIdsRef.current[index] = pluginId;\n    } else {\n      pluginId = renderingPluginIdsRef.current[index];\n    }\n\n    const pluginEntries = Object.entries(state.plugins);\n    const possiblePluginEntry = pluginEntries.filter(entry => entry[0] === pluginId)[0];\n    const nodes = possiblePluginEntry ? possiblePluginEntry[1].nodes : undefined;\n\n    return getPluginElement(pluginSrc, pluginId, nodes);\n  }), [getPluginElement, state.pluginsHistory, state.plugins, renderingPluginIdsRef]);\n\n  // reconnects cab convolver on ir change\n  useEffect(() => {\n    if (state.cabConvolver && state.allPluginsTailNode && Object.keys(state.allPluginsTailNode as object).length && state.audioContext) {\n      state.cabConvolver.disconnect();\n      (state.allPluginsTailNode.node as AudioNode).connect(state.cabConvolver as ConvolverNode).connect(state.audioContext.destination);\n    }\n  }, [state.cabConvolver, state.allPluginsTailNode, state.audioContext]);\n\n  // handles connecting faust plugins signal chain\n  useEffect(() => {\n    if (!streamSource || !audioContext || Object.keys(state.plugins).length !== plugins.length\n      || Object.entries(state.plugins).filter(entry => !!entry[1]).length !== plugins.length) {\n      return;\n    }\n\n    disconnectPlugins(state.plugins);\n\n    resumeAudioContext(audioContext).then(() => {\n      const pluginEntries = Object.entries(state.plugins);\n\n      const orderedPlugins = state.pluginsOrder\n        ? state.pluginsOrder.map(order => pluginEntries.filter(entry => entry[1].order === order)[0][1].nodes)\n        : pluginEntries.map(entry => entry[1].nodes);\n      const isAnyPluginLoading = !!orderedPlugins.filter(plugin => !plugin).length;\n\n      if (isAnyPluginLoading) {\n        return;\n      }\n\n      const allPluginsTailNode = [...orderedPlugins as Array<PluginType[]>].reverse().reduce((prevPlugin, currentPlugin, index) => {\n        const pluginTailNode = currentPlugin.reduce((prevNode, currentNode, i) => {\n          return i !== 0\n            ? (prevNode as AudioNode).connect(currentNode as AudioNode)\n            : currentNode as AudioNode;\n        }, {});\n\n        return index === 0 ? pluginTailNode : (pluginTailNode as AudioNode).connect(prevPlugin as AudioNode);\n      }, {});\n\n      const firstNode = (orderedPlugins as Array<PluginType[]>)[0][0];\n      (streamSource as AudioNode).connect(firstNode as AudioNode);\n\n      setState(prevState => ({ ...prevState, allPluginsTailNode: { node: allPluginsTailNode as AudioNode, } }));\n    });\n  }, [state.plugins, plugins.length, state.pluginsOrder, streamSource, audioContext]);\n\n  const setPluginsOrder = useCallback((pluginsOrder: Array<number>) => {\n    setState((prevState) => ({\n      ...prevState,\n      pluginsOrder,\n    }));\n  }, []);\n\n  const addPlugin = useCallback((source: string) => {\n    setState((prevState) => {\n      disconnectPlugins(prevState.plugins);\n      const pluginEntries = Object.entries(prevState.plugins);\n\n      // if all loaded plugins of a given source are already in a signal chain\n      const shouldLoadNewPlugin = !prevState.pluginsOrder || prevState.pluginsHistory.filter((src, index) => src === source && prevState.pluginsOrder?.includes(index)).length\n        === pluginEntries.filter(entry => entry[1].source === source).length;\n\n      const newPluginsOrder = prevState.pluginsOrder\n        ? [...prevState.pluginsOrder, shouldLoadNewPlugin\n          ? pluginEntries.length\n          : (pluginEntries.find(entry => entry[1].source === source && !prevState.pluginsOrder?.includes(entry[1].order)) as any)[1].order]\n        : [...pluginEntries.map((_, index) => index), pluginEntries.length]\n\n      return {\n        ...prevState,\n        pluginsHistory: !shouldLoadNewPlugin\n          ? prevState.pluginsHistory\n          : [...prevState.pluginsHistory, source],\n        pluginsOrder: newPluginsOrder,\n      };\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div>\n        Click <button disabled={!!lineInStreamSource} onClick={initGuitarInputFromLineIn}>here</button> to turn on your guitar input.\n      </div>\n      <div className=\"plugins-wrapper\">\n        <PluginsTrayWidget plugins={availablePlugins} />\n        <Diagram plugins={plugins} pluginsOrder={state.pluginsOrder} setPluginsOrder={setPluginsOrder} addPlugin={addPlugin} />\n      </div>\n      <Cabinet audioContext={state.audioContext} onCabReady={onCabReady} />\n      <div>\n        <audio controls ref={diAudioRef} onPlay={onDiPlay}>\n          <source src={`${process.env.PUBLIC_URL}/di/LasseMagoDI.mp3`} type=\"audio/mpeg\" />\n        </audio>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef } from 'react';\nimport { Knob, Pointer, Arc } from 'rc-knob';\nimport SpeexResampler from 'speex-resampler';\n\nimport { Profile, ProfileProps, profileSize, impulseSize } from './profile';\nimport { stopEventPropagation } from '../../helpers/utils';\n\nexport type nodeType = Faust.FaustMonoNode | AudioNode;\n\ntype propTypes = {\n    id: string,\n    context: AudioContext | null,\n    factory: Faust.MonoFactory | null,\n    compiler: Faust.Compiler | null,\n    onPluginReady: (nodes: nodeType[], source: string, id: string) => void,\n    pluginNodes?: nodeType[],\n};\n\ntype descriptorType = {\n    address: string,\n    index: number,\n    init: number,\n    label: string,\n    max: number,\n    min: number,\n    step: number,\n    type: string,\n};\n\nconst tubeAmpAddr = 'kpp_tubeamp.dsp';\n\nconst getControlsByType = (node: any, ctrlType: string): descriptorType[] => node ? (node).fDescriptor.filter(({ type }: descriptorType) => type === ctrlType) : [];\n\nconst TubeAmp = ({ id, context, factory, compiler, onPluginReady, pluginNodes }: propTypes) => {\n    const [node, setNode] = useState<Faust.FaustMonoNode | null>((pluginNodes ? pluginNodes[1] : null) as (Faust.FaustMonoNode | null));\n    const [profile, setProfile] = useState<Profile>();\n    const [resamplerReady, setResamplerReady] = useState<boolean>(false);\n    const fetchRef = useRef(false);\n\n    useEffect(() => {\n        if (!node && factory && context && compiler && !fetchRef.current) {\n            fetchRef.current = true;\n            fetch(process.env.PUBLIC_URL + '/' + tubeAmpAddr).then(resp => resp.text()).then(text => {\n                factory.compileNode(context, 'kpp_tubeamp_' + id, compiler, text, '-ftz 2', false, 128).then(faustNode => {\n                    if (faustNode) setNode(faustNode);\n                });\n            });\n        }\n    }, [context, factory, compiler, node, fetchRef, id]);\n\n    useEffect(() => {\n        SpeexResampler.initPromise.then(() => {\n            setResamplerReady(true);\n        });\n    }, [])\n\n    useEffect(() => {\n        if (context && node && !profile && resamplerReady) {\n            fetch(`${process.env.PUBLIC_URL}/tubeAmp_Profiles/v1.0/Modern Metal.tapf`)\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    // simulating C++ fread\n                    let bufferPosition = 0;\n                    const profileBuffer = buffer.slice(0, profileSize);\n                    bufferPosition = profileSize;\n\n                    // 4 chars 1 byte each\n                    const signature = new Uint8Array(profileBuffer.slice(0, 4));\n                    const testStr = 'TaPf';\n                    // simulating C++ strncmp function for checking profile signature\n                    for (let i = 0; i < testStr.length; i++) {\n                        if (testStr.charCodeAt(i) !== signature[i]) return;\n                    }\n\n                    const profileVersion = new Uint32Array(profileBuffer.slice(4, 8))[0];\n\n                    const profileArr = new Float32Array(profileBuffer);\n\n                    let profile: Profile;\n\n                    profile = profileArr.reduce<object>((prevVal, currentVal, index) =>\n                        Object.assign(prevVal, { [ProfileProps[index]]: currentVal })\n                        , {}) as Profile;\n\n                    profile.signature = testStr;\n                    profile.version = profileVersion;\n\n                    setProfile(profile);\n\n                    const impulseHeader = buffer.slice(bufferPosition, bufferPosition + impulseSize);\n                    bufferPosition += impulseSize;\n\n                    const impulseHeaderArr = new Int32Array(impulseHeader);\n                    const impulseSampleRate = impulseHeaderArr[0];\n                    const impulseSampleCount = impulseHeaderArr[2];\n                    const impulseSamplesSize = impulseSampleCount * 4;\n\n                    const impulseBuffer = buffer.slice(bufferPosition, bufferPosition + impulseSamplesSize);\n                    bufferPosition += impulseSamplesSize;\n\n                    if (impulseBuffer.byteLength !== impulseSamplesSize) {\n                        return;\n                    }\n\n                    const preampConvolver = new ConvolverNode(context);\n\n                    const resampler = new SpeexResampler(1, impulseSampleRate, context.sampleRate, 10);\n                    const bufferArr = new Int16Array(impulseBuffer);\n                    const res = resampler.processChunk(bufferArr as any);\n                    const resampledArr = new Float32Array(res);\n\n                    const audioBuffer = context.createBuffer(1, res.byteLength / 2, context.sampleRate);\n                    const audioData = audioBuffer.getChannelData(0);\n\n                    for (let i = 0; i < audioBuffer.length; i++) {\n                        audioData[i] = resampledArr[i];\n                    }\n\n                    preampConvolver.buffer = audioBuffer;\n\n                    onPluginReady([preampConvolver, node], tubeAmpAddr, id);\n                });\n        }\n    }, [context, node, profile, onPluginReady, id, resamplerReady]);\n\n    useEffect(() => {\n        const nentryParams = getControlsByType(node, 'nentry');\n\n        if (profile) {\n            nentryParams.forEach((descriptor) => {\n                node?.setParamValue(descriptor.address, profile[descriptor.label as keyof typeof ProfileProps] as number)\n            });\n        }\n    }, [node, profile])\n\n    if (!node) {\n        return <div>Start audio to load the plugin</div>;\n    }\n\n    const sliderParams = getControlsByType(node, 'vslider');\n\n    const handleChangeControl = (address: string, val: number) => {\n        node.setParamValue(address, val);\n    };\n\n    return (\n        <div className=\"plugin amp-head\">\n            <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\n            <div className=\"knobs-wrapper\" onMouseDown={stopEventPropagation}>\n                {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\n                    <div key={address} className=\"knob\">\n                        <label htmlFor={address}>{label}</label>\n                        <Knob\n                            size={50}\n                            angleOffset={220}\n                            angleRange={280}\n                            min={min}\n                            max={max}\n                            className=\"styledKnob\"\n                            value={init || 0.01} // because it renders incorrectly if 0\n                            onChange={(val: number) => handleChangeControl(address, val)}\n                        >\n                            <Arc\n                                arcWidth={0.75}\n                            />\n                            <circle r=\"20\" cx=\"25\" cy=\"25\" />\n                            <Pointer\n                                width={1}\n                                height={17.5}\n                                radius={5}\n                                type=\"rect\"\n                                color=\"#fff\"\n                            />\n                        </Knob>\n\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n};\n\nexport default TubeAmp;\n","import { useState, useEffect } from 'react';\nimport './Cabinet.css';\n\nconst positions = ['center', 'cone', 'edge'];\nconst irs = ['1on-preshigh', '1on-pres8', '1on-pres5'];\n\ntype PropTypes = {\n    audioContext: AudioContext | null,\n    onCabReady: (cab: ConvolverNode) => void,\n};\n\nconst Cabinet = ({ audioContext, onCabReady }: PropTypes) => {\n    const [position, setPosition] = useState<number>(0);\n\n    const changePosition = () => {\n        setPosition((prevPosition) => {\n            return prevPosition === positions.length - 1 ? 0 : prevPosition + 1;\n        })\n    };\n\n    useEffect(() => {\n        if (audioContext) {\n          fetch(`${process.env.PUBLIC_URL}/ir/${irs[position]}.wav`)\n            .then(response => response.arrayBuffer())\n            .then(buffer => {\n              audioContext.decodeAudioData(buffer, decoded => {\n                const cabConvolver = new ConvolverNode(audioContext);\n                cabConvolver.buffer = decoded;\n    \n                onCabReady(cabConvolver);\n              });\n            })\n        }\n      }, [position, audioContext, onCabReady]);\n\n    return (\n        <div className=\"cabinet\" onClick={changePosition}>\n            <img className=\"speaker\" alt=\"Guitar Speaker\" src={`${process.env.PUBLIC_URL}/speaker.png`} />\n            <img className={`mic mic--${positions[position]}`} alt=\"Microphone\" src={`${process.env.PUBLIC_URL}/shure_sm57.png`} />\n        </div>\n    );\n};\n\nexport default Cabinet;\n","import React from 'react';\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams';\nimport CustomNodeModel from './CustomNodeModel';\nimport styled from '@emotion/styled'\n\nconst Wrapper = styled.div`\n    .plugin-port {\n        width: 16px;\n        height: 16px;\n        z-index: 10;\n        background: rgba(0, 0, 0, 0.5);\n        border-radius: 8px;\n        cursor: pointer;\n        &:hover {\n            background: rgba(0, 0, 0, 1);\n        }\n        position: absolute;\n        top: 50%;\n\n        &.port-in {\n            left: 0%;\n        }\n        &.port-out {\n            right: 0%;\n        }\n    }\n`;\n\nexport interface CustomWidgetProps {\n    node: CustomNodeModel,\n    engine: DiagramEngine,\n}\n\nclass CustomNodeWidget extends React.Component<CustomWidgetProps>{\n    render() {\n        const InPort = this.props.node.getPort('In');\n        const OutPort = this.props.node.getPort('Out');\n\n        return (<Wrapper>\n            {this.props.node.plugin}\n            {InPort && <PortWidget className=\"plugin-port port-in\" port={InPort} engine={this.props.engine} />}\n            {OutPort && <PortWidget className=\"plugin-port port-out\" port={OutPort} engine={this.props.engine} />}\n        </Wrapper>);\n    }\n};\n\nexport default CustomNodeWidget;\n","import { PathFindingLinkModel } from \"@projectstorm/react-diagrams-routing\";\nimport { DefaultPortModel } from \"@projectstorm/react-diagrams-defaults\";\n\nclass CustomPortModel extends DefaultPortModel {\n    createLinkModel() {\n        return new PathFindingLinkModel();\n    }\n}\n\nexport default CustomPortModel;\n","import { NodeModel, NodeModelGenerics } from '@projectstorm/react-diagrams';\n\nimport CustomPortModel from './CustomPortModel';\n\nexport interface CustomNodeModelGenerics {\n    PLUGIN: any,\n}\n\nclass CustomNodeModel extends NodeModel<NodeModelGenerics & CustomNodeModelGenerics> {\n    constructor(public plugin: JSX.Element, public pluginIndex: number) {\n        super({\n            type: 'plugin',\n        });\n\n        this.addPort(new CustomPortModel(true, 'In', ''));\n        this.addPort(new CustomPortModel(false, 'Out', ''));\n    }\n}\n\nexport default CustomNodeModel;\n","import { AbstractReactFactory, GenerateModelEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nimport CustomNodeWidget from './CustomNodeWidget';\nimport CustomNodeModel from './CustomNodeModel';\n\nclass CustomNodeFactory extends AbstractReactFactory<CustomNodeModel, DiagramEngine> {\n    constructor() {\n        super('plugin');\n    }\n\n    generateReactWidget(event: any): JSX.Element {\n        return <CustomNodeWidget engine={this.engine} node={event.model} />;\n    }\n\n    generateModel(event: GenerateModelEvent) {\n        return new CustomNodeModel(<></>, 0);\n    }\n}\n\nexport default CustomNodeFactory;\n","import { useEffect, useState, useRef } from 'react';\nimport createEngine, {\n    DefaultLinkModel,\n    DefaultPortModel,\n    DiagramEngine,\n    DagreEngine,\n    DiagramModel,\n    NodeModel,\n    PathFindingLinkFactory,\n    PathFindingLinkModel,\n    PortModel,\n    DefaultNodeModel,\n    LinkModel,\n    NodeModelListener,\n} from '@projectstorm/react-diagrams';\nimport {\n    CanvasWidget,\n    BaseEvent,\n    BaseListener\n} from '@projectstorm/react-canvas-core';\nimport isEqual from 'lodash/isEqual';\n\nimport './Diagram.css';\nimport CustomNodeFactory from './CustomNodeFactory';\nimport CustomNodeModel from './CustomNodeModel';\n\nconst removePortLinks = (port: PortModel, linkToExclude?: PathFindingLinkModel): void => {\n    const links = port.getLinks();\n    if (Object.keys(links).length > (linkToExclude ? 1 : 0)) {\n        Object.entries(links).forEach((entry) => {\n            const link = entry[1];\n            if (link !== linkToExclude) {\n                link.remove();\n            }\n        });\n    }\n}\n\nconst getSignalChain = (model: DiagramModel, inputNodeID: string) => {\n    const signalChain: number[] = [];\n    let adjacentLinks: { [id: string]: LinkModel; } | undefined;\n    let link: LinkModel;\n    let node: NodeModel = model.getNode(inputNodeID);\n    const nodes = model.getNodes();\n\n    for (let i = 0; i < nodes.length - 1; i++) {\n        adjacentLinks = (node as DefaultNodeModel)\n            .getPort('Out')?.getLinks();\n\n        if (!adjacentLinks || !Object.keys(adjacentLinks).length) {\n            return null;\n        }\n\n        link = (Object.entries(\n            adjacentLinks as {})[0][1] as LinkModel);\n\n        if (link.getSourcePort().getNode() === node) {\n            node = link.getTargetPort().getNode();\n        } else {\n            node = link.getSourcePort().getNode();\n        }\n\n        if (node instanceof CustomNodeModel) {\n            signalChain.push(node.pluginIndex);\n        }\n    }\n\n    return signalChain;\n}\n\ntype PropTypes = {\n    plugins: JSX.Element[],\n    setPluginsOrder: Function,\n    addPlugin: Function,\n    pluginsOrder: number[] | null,\n};\n\nconst Diagram = ({ plugins, setPluginsOrder, pluginsOrder, addPlugin }: PropTypes) => {\n    const [engine, setEngine] = useState<DiagramEngine>();\n    const pluginsRef = useRef<typeof plugins>([]);\n    const pluginsOrderRef = useRef<typeof pluginsOrder>([]);\n\n    useEffect(() => {\n        const diagramEngine = createEngine({ registerDefaultZoomCanvasAction: false });\n        diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n        setEngine(diagramEngine);\n    }, []);\n\n    useEffect(() => {\n        const pluginsOrderChanged = !isEqual(pluginsOrderRef.current, pluginsOrder);\n        const pluginAdded = pluginsOrder && pluginsOrderRef.current && (pluginsOrderRef.current as number[]).length < pluginsOrder.length;\n\n        if (engine && (pluginAdded || ((pluginsOrderChanged || !pluginsOrder) && pluginsRef.current !== plugins))) {\n            let model = engine.getModel();\n            let node: NodeModel;\n            let links: DefaultLinkModel[] = [];\n            const renderedPluginsLength = pluginsOrder ? pluginsOrder.length : plugins.length;\n            const newPluginIndex = pluginsOrder ? pluginsOrder[pluginsOrder.length - 1] : renderedPluginsLength - 1;\n\n            // when new plugin is added on prerendered pedalboard\n            if (model && model.getNodes().length - 2 < renderedPluginsLength) {\n                node = new CustomNodeModel(pluginsOrder ? plugins[newPluginIndex as number] : plugins[plugins.length - 1], newPluginIndex);\n\n                let outputNode = model.getNodes().filter(n => n instanceof DefaultNodeModel && (n as DefaultNodeModel).getOptions().name === 'Output')[0];\n                let outputPort = outputNode.getPort('In') as DefaultPortModel;\n                let outputLink = Object.keys(outputPort.getLinks()).length && Object.entries(outputPort.getLinks())[0][1];\n                outputLink && removePortLinks(outputPort);\n\n                let connectedToOutputNodePort = outputLink && (outputLink.getTargetPort().getNode() === outputNode ? outputLink.getSourcePort() : outputLink.getTargetPort());\n\n                links = [\n                    (node.getPort('Out') as DefaultPortModel).link(outputPort),\n                ];\n\n                outputLink && links.push((connectedToOutputNodePort as DefaultPortModel).link(node.getPort('In') as DefaultPortModel));\n\n                model.addAll(node, ...links);\n            }\n            // when initializing diagram\n            else if (!pluginsOrder) {\n                let nodes: NodeModel[] = [];\n\n                const pathfinding = engine.getLinkFactories().getFactory<PathFindingLinkFactory>(PathFindingLinkFactory.NAME);\n\n                plugins.forEach((plugin, i) => {\n                    node = new CustomNodeModel(plugin, i);\n                    nodes.push(node);\n                    if (i > 0) {\n                        links.push((nodes[i - 1].getPort('Out') as DefaultPortModel).link(nodes[i].getPort('In') as DefaultPortModel, pathfinding));\n                    }\n                });\n\n                // binding input and output audio signal nodes\n                nodes = [new DefaultNodeModel({ name: 'Input' }), ...nodes];\n                nodes.push(new DefaultNodeModel({ name: 'Output' }));\n\n                const disableDeleteListener = {\n                    eventWillFire: (event: BaseEvent & { function: string; }) => {\n                        if (event.function === 'entityRemoved') {\n                            event.stopPropagation();\n                        }\n                    }\n                };\n\n                nodes[0].registerListener(disableDeleteListener as NodeModelListener);\n                nodes[nodes.length - 1].registerListener(disableDeleteListener as NodeModelListener);\n\n                if (nodes.length > 2) {\n                    links = [\n                        (nodes[0] as DefaultNodeModel)\n                            .addPort(new DefaultPortModel({ name: 'Out' }))\n                            .link(nodes[1].getPort('In') as DefaultPortModel, pathfinding),\n                        ...links\n                    ];\n\n                    links.push(\n                        (nodes[nodes.length - 2] as any)\n                            .getPort('Out')\n                            .link(nodes[nodes.length - 1].addPort(new DefaultPortModel({ name: 'In' })), pathfinding)\n                    );\n                }\n\n                model = new DiagramModel();\n                model.addAll(...nodes, ...links);\n                engine.setModel(model);\n\n                type EventType = BaseEvent & { function: string; link: PathFindingLinkModel; isCreated: boolean; };\n\n                const listener = {\n                    eventDidFire: (event: EventType) => {\n                        if (event.function === 'linksUpdated') {\n                            const newLink = event.link;\n                            const sourcePort = newLink.getSourcePort();\n\n                            // remove existing links when relinking\n                            removePortLinks(sourcePort, newLink);\n\n                            if (event.isCreated) {\n                                // fired when linking to target port is complete\n                                // disables chaining plugin into itself\n                                newLink.registerListener({\n                                    targetPortChanged: (event: any) => {\n                                        if (event.port.getParent() === sourcePort.getParent()) {\n                                            newLink.remove();\n                                        } else {\n                                            removePortLinks(event.port, newLink);\n                                        }\n\n                                        const signalChain = getSignalChain(model, nodes[0].getID());\n                                        signalChain && setPluginsOrder(signalChain);\n                                    }\n                                })\n                            }\n                        }\n                    },\n                };\n\n                model.registerListener(listener as BaseListener);\n\n                const state = engine.getStateMachine().getCurrentState();\n                if (state) {\n                    (state as any).dragCanvas.config.allowDrag = false;\n                }\n\n            }\n\n            setTimeout(() => {\n                const dagreEngine = new DagreEngine({\n                    graph: {\n                        rankdir: 'LR',\n                        ranker: 'longest-path',\n                        marginx: 25,\n                        marginy: 25,\n                    },\n                    includeLinks: true\n                });\n\n                dagreEngine.redistribute(model);\n                engine\n                    .getLinkFactories()\n                    .getFactory<PathFindingLinkFactory>(PathFindingLinkFactory.NAME)\n                    .calculateRoutingMatrix();\n\n                engine.repaintCanvas();\n            }, 1000);\n\n            pluginsRef.current = plugins;\n        }\n\n        if (pluginsOrderChanged) {\n            pluginsOrderRef.current = pluginsOrder;\n        }\n    }, [plugins, engine, pluginsOrder, setPluginsOrder, pluginsRef]);\n\n    if (!engine || !engine.getModel()) {\n        return null;\n    }\n\n    return (\n        <div onDrop={event => {\n            const data = event.dataTransfer.getData('plugin');\n            addPlugin(data);\n        }}\n            className=\"canvas\"\n            onDragOver={event => event.preventDefault()}>\n            <CanvasWidget className=\"canvas\" engine={engine} />\n        </div>\n    );\n}\n\nexport default Diagram;\n","type PropTypes = {\n    plugins: string[],\n}\n\nconst PluginsTrayWidget = ({ plugins }: PropTypes) => {\n    return (\n        <div>\n            {plugins.map((plugin, index) =>\n                <div key={index} draggable={true} onDragStart={event => event.dataTransfer.setData('plugin', plugin)}>\n                    {plugin}\n                </div>)}\n        </div>\n    );\n};\n\nexport default PluginsTrayWidget;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}