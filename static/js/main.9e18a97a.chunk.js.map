{"version":3,"sources":["features/tubeAmp/profile.ts","helpers/utils.ts","features/pedal/index.tsx","App.tsx","features/tubeAmp/index.tsx","features/cabinet/index.tsx","features/diagram/CustomNodeWidget.tsx","features/diagram/CustomPortModel.ts","features/diagram/CustomNodeModel.ts","features/diagram/CustomNodeFactory.tsx","features/diagram/index.tsx","features/pluginsTray/index.tsx","features/details/index.tsx","features/inputDeviceSelect/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ProfileProps","stopEventPropagation","e","stopPropagation","Pedal","id","sourceUrl","context","factory","compiler","onPluginReady","pluginNodes","useState","node","setNode","fetchRef","useRef","useEffect","current","fetch","process","then","resp","text","compileNode","sliderParams","fDescriptor","filter","type","className","fJSONDsp","name","onMouseDown","map","address","init","label","min","max","step","htmlFor","toUpperCase","size","angleOffset","angleRange","value","onChange","val","setParamValue","handleChangeControl","arcWidth","color","radius","width","marginBottom","InputModes","tubeAmpAddr","availableProfiles","defaultProfile","getControlsByType","ctrlType","TubeAmp","pluginProfile","source","profileSource","setProfileSource","profile","setProfile","faustNode","src","response","arrayBuffer","buffer","bufferPosition","profileBuffer","slice","signature","Uint8Array","testStr","i","length","charCodeAt","profileVersion","Uint32Array","Float32Array","reduce","prevVal","currentVal","index","Object","assign","version","impulseHeader","impulseHeaderArr","Int32Array","impulseSampleRate","impulseSamplesSize","impulseBuffer","byteLength","preampConvolver","ConvolverNode","bufferArr","resampledArr","resample","sampleRate","audioBuffer","createBuffer","audioData","getChannelData","nentryParams","forEach","descriptor","target","onProfileChange","r","cx","cy","height","positions","irs","cabConvolverFromArrayBuffer","audioContext","cb","cabConvolver","decodeAudioData","decoded","Cabinet","onCabReady","position","setPosition","onClick","prevPosition","alt","accept","event","files","Wrapper","styled","div","CustomNodeWidget","InPort","this","props","getPort","OutPort","plugin","port","engine","React","Component","CustomPortModel","PathFindingLinkModel","DefaultPortModel","CustomNodeModel","pluginIndex","addPort","NodeModel","CustomNodeFactory","model","AbstractReactFactory","removePortLinks","linkToExclude","links","getLinks","keys","entries","entry","link","remove","Diagram","plugins","setPluginsOrder","pluginsOrder","addPlugin","setEngine","pluginsRef","pluginsOrderRef","diagramEngine","createEngine","registerDefaultZoomCanvasAction","getNodeFactories","registerFactory","pluginsOrderChanged","isEqual","pluginAdded","getModel","renderedPluginsLength","newPluginIndex","getNodes","outputNode","n","DefaultNodeModel","getOptions","outputPort","outputLink","connectedToOutputNodePort","getTargetPort","getNode","getSourcePort","push","addAll","nodes","pathfinding","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","disableDeleteListener","eventWillFire","function","registerListener","DiagramModel","setModel","listener","eventDidFire","newLink","sourcePort","isCreated","targetPortChanged","getParent","signalChain","inputNodeID","adjacentLinks","getSignalChain","getID","state","getStateMachine","getCurrentState","dragCanvas","config","allowDrag","setTimeout","DagreEngine","graph","rankdir","ranker","marginx","marginy","ranksep","includeLinks","redistribute","calculateRoutingMatrix","repaintCanvas","onDrop","data","dataTransfer","getData","onDragOver","preventDefault","PluginsTrayWidget","draggable","onDragStart","setData","Details","href","InputDeviceSelect","devices","setDevices","navigator","mediaDevices","enumerateDevices","kind","deviceId","disconnectPlugins","disconnect","availablePlugins","initialState","lineInStreamSource","diTrackStreamSource","inputMode","inputDeviceID","pluginsHistory","allPluginsTailNode","faustCompiler","faustFactory","faustCode","App","setState","diAudioRef","Audio","resumeAudioContext","resume","Promise","resolve","streamSource","initGuitarInputFromLineIn","useCallback","deviceID","a","AudioContext","latencyHint","devID","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","stream","createMediaStreamSource","prevState","MIC","FaustModule","module","Faust","createCompiler","createLibFaust","createMonoFactory","DI","order","pluginEntries","samePlugin","find","lastPluginOccurance","sort","b","undefined","indexOf","destination","deviceIDChangeHandler","getPluginElement","pluginSrc","renderingPluginIdsRef","useMemo","pluginId","uuidv4","possiblePluginEntry","connect","orderedPlugins","reverse","prevPlugin","currentPlugin","pluginTailNode","prevNode","currentNode","firstNode","shouldLoadNewPlugin","includes","newPluginsOrder","_","disabled","controls","ref","onPlay","audioElement","createMediaElementSource","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9e18a97a.chunk.js","sourcesContent":["// Structure with tubeAmp model\n// parameters.\n\nexport enum ProfileProps {\n    source, signature, version, preamp_level, preamp_bias, preamp_Kreg, preamp_Upor,\n    tonestack_low_freq, tonestack_low_band, tonestack_middle_freq, tonestack_middle_band, tonestack_high_freq, tonestack_high_band,\n    amp_level, amp_bias, amp_Kreg, amp_Upor, sag_time, sag_coeff, output_level,\n}\n\nexport type ProfilePropTypes = [string, string, ...number[]];\n\nexport type ProfilePropsUnion = keyof typeof ProfileProps;\n\nexport type Profile = {\n    [k in ProfilePropsUnion]: ProfilePropTypes[typeof ProfileProps[k]]\n}\n\n// export interface Profile\n// {\n//     signature: string; // 4 chars, 4 bytes in total\n    \n//     version: number; // uint32\n    \n//     preamp_level: number; // 4 byte float\n//     preamp_bias: number; // 4 byte float\n//     preamp_Kreg: number; // 4 byte float\n//     preamp_Upor: number; // 4 byte float\n    \n//     tonestack_low_freq: number; // 4 byte float\n//     tonestack_low_band: number; // 4 byte float\n//     tonestack_middle_freq: number; // 4 byte float\n//     tonestack_middle_band: number; // 4 byte float\n//     tonestack_high_freq: number; // 4 byte float\n//     tonestack_high_band: number; // 4 byte float\n    \n//     amp_level: number; // 4 byte float\n//     amp_bias: number; // 4 byte float\n//     amp_Kreg: number; // 4 byte float\n//     amp_Upor: number; // 4 byte float\n    \n//     sag_time: number; // 4 byte float\n//     sag_coeff: number; // 4 byte float\n    \n//     output_level: number; // 4 byte float\n// }\n\nexport const profileSize = 76; // 19 * 4, size in bytes\n\n// structure of\n// impulse response data\n// in *.tapf profile file\n\nexport interface Impulse {\n    sample_rate: number; // 4 byte int\n    channel: number; // 4 byte int\n    sample_count: number; // 4 byte int\n}\n\nexport const impulseSize = 12;\n","import { UIEvent } from 'react'\n\nexport const stopEventPropagation = (e: UIEvent) => {\n    e.stopPropagation();\n};\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef } from 'react';\nimport { Knob, Pointer, Arc, Value } from 'rc-knob';\n\nimport { stopEventPropagation } from '../../helpers/utils';\n\nexport type nodeType = Faust.FaustMonoNode | null;\n\ntype propTypes = {\n  id: string,\n  sourceUrl: string,\n  context: AudioContext | null,\n  factory: Faust.MonoFactory | null,\n  compiler: Faust.Compiler | null,\n  onPluginReady: (nodes: nodeType[], source: string, id: string) => void,\n  pluginNodes?: nodeType[],\n};\n\ntype descriptorType = {\n  address: string,\n  index: number,\n  init: number,\n  label: string,\n  max: number,\n  min: number,\n  step: number,\n  type: string,\n};\n\nconst Pedal = ({ id, sourceUrl, context, factory, compiler, onPluginReady, pluginNodes, }: propTypes) => {\n  const [node, setNode] = useState<nodeType>(pluginNodes ? pluginNodes[0] : null);\n\n  const fetchRef = useRef(false);\n\n  useEffect(() => {\n    if (factory && context && compiler && !node && !fetchRef.current) {\n      fetch(process.env.PUBLIC_URL + '/' + sourceUrl).then(resp => resp.text()).then(text => {\n        fetchRef.current = true;\n        factory.compileNode(context, 'Pedal_' + id, compiler, text, '-ftz 2', false, 128).then(node => {\n          setNode(node);\n          onPluginReady([node], sourceUrl, id);\n        });\n      });\n    }\n  }, [sourceUrl, context, factory, compiler, onPluginReady, id, node, fetchRef]);\n\n  if (!node) {\n    return <div>Start audio to load the plugin</div>;\n  }\n\n  const sliderParams = (node as any).fDescriptor.filter(({ type }: descriptorType) => type === 'vslider' || type === 'hslider');\n\n  const handleChangeControl = (address: string, val: number) => {\n    node.setParamValue(address, val);\n  };\n\n  return (\n    <div className=\"plugin pedal\">\n      <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\n      <div className=\"knobs-wrapper\" onMouseDown={stopEventPropagation}>\n        {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\n          <div key={address} className=\"knob\">\n            <label htmlFor={address}>{label.toUpperCase()}</label>\n            <Knob\n              size={50}\n              angleOffset={220}\n              angleRange={280}\n              min={min}\n              max={max}\n              value={init || 0.01}\n              onChange={(val: number) => handleChangeControl(address, val)}\n            >\n              <Arc\n                arcWidth={2.5}\n                color=\"#FC5A96\"\n                radius={18.75}\n              />\n              <Pointer\n                width={2.5}\n                radius={20}\n                type=\"circle\"\n                color=\"#180094\"\n              />\n              <Value\n                marginBottom={20}\n                className=\"value\"\n              />\n            </Knob>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n};\n\nexport default Pedal;\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport './App.css';\n\nimport Pedal, { nodeType as pedalNodeType } from './features/pedal';\nimport TubeAmp, { nodeType as tubeAmpNodeType } from './features/tubeAmp';\nimport Cabinet from './features/cabinet';\nimport Diagram from './features/diagram';\nimport PluginsTrayWidget from './features/pluginsTray';\nimport { Profile } from './features/tubeAmp/profile';\nimport Details from './features/details';\nimport InputDeviceSelect from './features/inputDeviceSelect';\n\ndeclare var FaustModule: any;\n\nenum InputModes {\n  DI,\n  MIC\n}\n\nexport type PluginType = AudioNode | pedalNodeType | tubeAmpNodeType;\ntype PluginsType = Record<string, {\n  source: string;\n  nodes: Array<PluginType>;\n  order: number;\n  profile?: Profile;\n}>;\n\nfunction disconnectPlugins(plugins: PluginsType) {\n  const pluginNodes = Object.entries(plugins).map(entry => entry[1].nodes);\n\n  pluginNodes.forEach((plugin) => {\n    if (plugin) {\n      plugin.forEach(node => node?.disconnect());\n    }\n  });\n}\n\nconst availablePlugins = ['kpp_distruction.dsp', 'kpp_octaver.dsp', 'kpp_tubeamp.dsp', 'kpp_fuzz.dsp', 'kpp_bluedream.dsp',];\n\ninterface StateType {\n  audioContext: AudioContext | null,\n  lineInStreamSource: MediaStreamAudioSourceNode | null,\n  diTrackStreamSource: MediaElementAudioSourceNode | null,\n  inputDeviceID: string,\n  inputMode: InputModes | null,\n  cabConvolver: ConvolverNode | null,\n  pluginsHistory: Array<string>, // filled when new plugins are loaded by source url, doesn't get reduced for caching reasons\n  plugins: PluginsType, // all currently loaded plugins\n  pluginsOrder: Array<number> | null, // plugin indices from pluginsHistory\n  allPluginsTailNode: { node: PluginType; } | null,\n  faustCompiler: Faust.Compiler | null,\n  faustFactory: Faust.MonoFactory | null,\n  faustCode: string,\n}\n\nconst initialState: StateType = {\n  audioContext: null,\n  lineInStreamSource: null,\n  diTrackStreamSource: null,\n  inputMode: null,\n  inputDeviceID: 'default',\n  cabConvolver: null,\n  pluginsHistory: [\n    // 'kpp_distruction.dsp',\n    'kpp_tubeamp.dsp',\n    // 'kpp_octaver.dsp',\n  ],\n  plugins: {},\n  pluginsOrder: null,\n  allPluginsTailNode: null,\n  faustCompiler: null,\n  faustFactory: null,\n  faustCode: '',\n};\n\nfunction App() {\n  const [state, setState] = useState<StateType>(initialState);\n\n  const { audioContext, lineInStreamSource, diTrackStreamSource } = state;\n\n  const diAudioRef = useRef(new Audio());\n\n  function resumeAudioContext(audioContext: AudioContext) {\n    if (audioContext.state === 'suspended' || audioContext.state !== 'running') {\n      return audioContext.resume();\n    }\n    return Promise.resolve();\n  }\n\n  const initGuitarInputFromLineIn = useCallback(async function (deviceID?: string) {\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\n\n    const devID = deviceID ?? state.inputDeviceID;\n\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        deviceId: devID,\n        echoCancellation: false,\n        autoGainControl: false,\n        noiseSuppression: false,\n        latency: 0\n      } as MediaTrackConstraints\n    });\n\n    await resumeAudioContext(audioContext);\n\n    const lineInStreamSource = audioContext.createMediaStreamSource(stream);\n    setState((prevState) => {\n      if (prevState.lineInStreamSource) {\n        prevState.lineInStreamSource.disconnect();\n      }\n\n      return {\n        ...prevState,\n        audioContext,\n        lineInStreamSource,\n        diTrackStreamSource,\n        inputDeviceID: devID,\n        inputMode: InputModes.MIC,\n      }\n    });\n  }, [state.audioContext, diTrackStreamSource, state.inputDeviceID]);\n\n  function onDiPlay() {\n    if (diTrackStreamSource) {\n      return;\n    }\n\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', sampleRate: 44100 });\n    const audioElement = diAudioRef.current;\n\n    resumeAudioContext(audioContext).then(() => {\n      const diTrackStreamSource = audioContext.createMediaElementSource(audioElement);\n      setState((prevState) => ({\n        ...prevState,\n        audioContext,\n        lineInStreamSource,\n        diTrackStreamSource,\n        inputMode: InputModes.DI\n      }));\n    });\n  }\n\n  useEffect(() => {\n    FaustModule().then((module: any) => {\n      let compiler = Faust.createCompiler(Faust.createLibFaust(module) as Faust.LibFaust);\n\n      let factory = Faust.createMonoFactory();\n\n      setState((prevState) => ({\n        ...prevState,\n        faustFactory: factory,\n        faustCompiler: compiler,\n      }));\n    });\n  }, []);\n\n  let streamSource: typeof diTrackStreamSource | typeof lineInStreamSource;\n\n  switch (state.inputMode) {\n    case InputModes.DI: streamSource = diTrackStreamSource; break;\n    case InputModes.MIC: streamSource = lineInStreamSource; break;\n    default: streamSource = diTrackStreamSource || lineInStreamSource;\n  }\n\n  const onPluginReady = useCallback((nodes: (pedalNodeType | tubeAmpNodeType)[], source: string, id: string, profile?: Profile) => {\n    setState(prevState => {\n      let order: number;\n      const pluginEntries = Object.entries(prevState.plugins);\n\n      const samePlugin = pluginEntries.find(entry => entry[0] === id);\n\n      if (!samePlugin) {\n        const lastPluginOccurance = (pluginEntries\n          .filter(entry => entry[1].source === source)\n          ?.map(entry => entry[1].order)\n          .sort((a, b) => b - a) || [undefined])[0];\n\n        order = prevState.pluginsHistory.indexOf(source, typeof lastPluginOccurance === 'number' ? lastPluginOccurance + 1 : undefined);\n        order = order === -1 ? prevState.pluginsHistory.length : order;\n      } else {\n        order = samePlugin[1].order;\n      }\n\n      return {\n        ...prevState,\n        pluginsOrder: prevState.pluginsOrder || [0],\n        plugins: {\n          ...prevState.plugins,\n          [id]: {\n            order,\n            nodes,\n            source,\n            profile,\n          }\n        }\n      };\n    });\n  }, []);\n\n  const onCabReady = useCallback((cabConvolver: ConvolverNode) => {\n    setState(prevState => {\n      if (prevState.cabConvolver && prevState.audioContext && prevState.allPluginsTailNode?.node) {\n        prevState.allPluginsTailNode.node.disconnect(prevState.cabConvolver);\n        prevState.cabConvolver.disconnect(prevState.audioContext.destination);\n      }\n      return { ...prevState, cabConvolver };\n    });\n  }, []);\n\n  const deviceIDChangeHandler = useCallback((deviceID: string) => {\n    if (state.inputMode === InputModes.MIC) {\n      initGuitarInputFromLineIn(deviceID);\n    }\n  }, [initGuitarInputFromLineIn, state.inputMode]);\n\n  const getPluginElement = useCallback((pluginSrc: string, id: string, pluginNodes?: Array<PluginType>, pluginProfile?: Profile): JSX.Element => {\n    return pluginSrc === 'kpp_tubeamp.dsp'\n      ? <TubeAmp id={id} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} pluginNodes={pluginNodes as tubeAmpNodeType[]} pluginProfile={pluginProfile} />\n      : <Pedal id={id} sourceUrl={pluginSrc} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} pluginNodes={pluginNodes as pedalNodeType[]} />;\n  }, [state.faustFactory, state.faustCompiler, state.audioContext, onPluginReady]);\n\n  const renderingPluginIdsRef = useRef<Array<string>>([]);\n  const plugins = useMemo(() => state.pluginsHistory.map((pluginSrc, index) => {\n    let pluginId: string;\n    if (!renderingPluginIdsRef.current[index]) {\n      pluginId = uuidv4();\n      renderingPluginIdsRef.current[index] = pluginId;\n    } else {\n      pluginId = renderingPluginIdsRef.current[index];\n    }\n\n    const pluginEntries = Object.entries(state.plugins);\n    const possiblePluginEntry = pluginEntries.filter(entry => entry[0] === pluginId)[0];\n    const nodes = possiblePluginEntry ? possiblePluginEntry[1].nodes : undefined;\n    const pluginProfile = possiblePluginEntry ? possiblePluginEntry[1].profile : undefined;\n\n    return getPluginElement(pluginSrc, pluginId, nodes, pluginProfile);\n  }), [getPluginElement, state.pluginsHistory, state.plugins, renderingPluginIdsRef]);\n\n  // reconnects cab convolver on ir change\n  useEffect(() => {\n    if (state.cabConvolver && state.allPluginsTailNode && Object.keys(state.allPluginsTailNode as object).length && state.audioContext) {\n      state.cabConvolver.disconnect();\n      (state.allPluginsTailNode.node as AudioNode).connect(state.cabConvolver as ConvolverNode).connect(state.audioContext.destination);\n    }\n  }, [state.cabConvolver, state.allPluginsTailNode, state.audioContext]);\n\n  // handles connecting faust plugins signal chain\n  useEffect(() => {\n    if (!streamSource || !audioContext || Object.keys(state.plugins).length !== plugins.length\n      || Object.entries(state.plugins).filter(entry => !!entry[1]).length !== plugins.length) {\n      return;\n    }\n\n    disconnectPlugins(state.plugins);\n\n    resumeAudioContext(audioContext).then(() => {\n      const pluginEntries = Object.entries(state.plugins);\n\n      const orderedPlugins = state.pluginsOrder\n        ? state.pluginsOrder.map(order => pluginEntries.filter(entry => entry[1].order === order)[0][1].nodes)\n        : pluginEntries.map(entry => entry[1].nodes);\n      const isAnyPluginLoading = !!orderedPlugins.filter(plugin => !plugin).length;\n\n      if (isAnyPluginLoading) {\n        return;\n      }\n\n      const allPluginsTailNode = [...orderedPlugins as Array<PluginType[]>].reverse().reduce((prevPlugin, currentPlugin, index) => {\n        const pluginTailNode = currentPlugin.reduce((prevNode, currentNode, i) => {\n          return i !== 0\n            ? (prevNode as AudioNode).connect(currentNode as AudioNode)\n            : currentNode as AudioNode;\n        }, {});\n\n        return index === 0 ? pluginTailNode : (pluginTailNode as AudioNode).connect(prevPlugin as AudioNode);\n      }, {});\n\n      const firstNode = (orderedPlugins as Array<PluginType[]>)[0][0];\n      (streamSource as AudioNode).connect(firstNode as AudioNode);\n\n      setState(prevState => ({ ...prevState, allPluginsTailNode: { node: allPluginsTailNode as AudioNode, } }));\n    });\n  }, [state.plugins, plugins.length, state.pluginsOrder, streamSource, audioContext]);\n\n  const setPluginsOrder = useCallback((pluginsOrder: Array<number>) => {\n    setState((prevState) => ({\n      ...prevState,\n      pluginsOrder,\n    }));\n  }, []);\n\n  const addPlugin = useCallback((source: string) => {\n    setState((prevState) => {\n      disconnectPlugins(prevState.plugins);\n      const pluginEntries = Object.entries(prevState.plugins);\n\n      // if all loaded plugins of a given source are already in a signal chain\n      const shouldLoadNewPlugin = !prevState.pluginsOrder || prevState.pluginsHistory.filter((src, index) => src === source && prevState.pluginsOrder?.includes(index)).length\n        === pluginEntries.filter(entry => entry[1].source === source).length;\n\n      const newPluginsOrder = prevState.pluginsOrder\n        ? [...prevState.pluginsOrder, shouldLoadNewPlugin\n          ? pluginEntries.length\n          : (pluginEntries.find(entry => entry[1].source === source && !prevState.pluginsOrder?.includes(entry[1].order)) as any)[1].order]\n        : [...pluginEntries.map((_, index) => index), pluginEntries.length]\n\n      return {\n        ...prevState,\n        pluginsHistory: !shouldLoadNewPlugin\n          ? prevState.pluginsHistory\n          : [...prevState.pluginsHistory, source],\n        pluginsOrder: newPluginsOrder,\n      };\n    })\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"non-canvas\">\n        <div className=\"details-wrapper\">\n          <Details />\n        </div>\n        <div className=\"device-select-wrapper\">\n          <InputDeviceSelect onChange={deviceIDChangeHandler} />\n        </div>\n        <div>\n          Click <button disabled={!!lineInStreamSource} onClick={() => initGuitarInputFromLineIn()}>here</button> to turn on your guitar input.\n        </div>\n        <Cabinet audioContext={state.audioContext} onCabReady={onCabReady} />\n        <div>\n          <audio controls ref={diAudioRef} onPlay={onDiPlay}>\n            <source src={`${process.env.PUBLIC_URL}/di/LasseMagoDI.mp3`} type=\"audio/mpeg\" />\n          </audio>\n        </div>\n        {!!Object.entries(state.plugins).length && <PluginsTrayWidget plugins={availablePlugins} />}\n      </div>\n      <div className=\"plugins-diagram\">\n        <Diagram plugins={plugins} pluginsOrder={state.pluginsOrder} setPluginsOrder={setPluginsOrder} addPlugin={addPlugin} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef, ChangeEvent } from 'react';\nimport { Knob, Pointer, Arc } from 'rc-knob';\nimport { resample } from 'wave-resampler';\n\nimport { Profile, ProfileProps, profileSize, impulseSize } from './profile';\nimport { stopEventPropagation } from '../../helpers/utils';\n\nexport type nodeType = Faust.FaustMonoNode | AudioNode;\n\ntype propTypes = {\n    id: string,\n    context: AudioContext | null,\n    factory: Faust.MonoFactory | null,\n    compiler: Faust.Compiler | null,\n    onPluginReady: (nodes: nodeType[], source: string, id: string, profile: Profile) => void,\n    pluginNodes?: nodeType[],\n    pluginProfile?: Profile\n};\n\ntype descriptorType = {\n    address: string,\n    index: number,\n    init: number,\n    label: string,\n    max: number,\n    min: number,\n    step: number,\n    type: string,\n};\n\nconst tubeAmpAddr = 'kpp_tubeamp.dsp';\nconst availableProfiles = [\n    'v1.0/American Clean', 'v1.0/American Vintage', 'v1.0/British Crunch', 'v1.0/Modern Metal',\n    'v1.2/Classic Hard', 'v1.2/JCM800 (spice)', 'v1.2/MarkII', 'v1.2/TwinReverb (spice)',\n    'supersonic_amp', 'supersonic_amp_2', 'toan_zoan',\n];\nconst defaultProfile = availableProfiles[0];\n\nconst getControlsByType = (node: any, ctrlType: string): descriptorType[] => node ? (node).fDescriptor.filter(({ type }: descriptorType) => type === ctrlType) : [];\n\nconst TubeAmp = ({ id, context, factory, compiler, onPluginReady, pluginNodes, pluginProfile }: propTypes) => {\n    const [node, setNode] = useState<Faust.FaustMonoNode | null>((pluginNodes ? pluginNodes[1] : null) as (Faust.FaustMonoNode | null));\n    const [profileSource, setProfileSource] = useState<string>(pluginProfile?.source || defaultProfile);\n    const [profile, setProfile] = useState<Profile | undefined>(pluginProfile);\n    const fetchRef = useRef(false);\n\n    useEffect(() => {\n        if (!node && factory && context && compiler && !fetchRef.current) {\n            fetchRef.current = true;\n            fetch(process.env.PUBLIC_URL + '/' + tubeAmpAddr).then(resp => resp.text()).then(text => {\n                factory.compileNode(context, 'kpp_tubeamp_' + id, compiler, text, '-ftz 2', false, 128).then(faustNode => {\n                    if (faustNode) setNode(faustNode);\n                });\n            });\n        }\n    }, [context, factory, compiler, node, fetchRef, id]);\n\n    useEffect(() => {\n        if (context && node && ((!pluginNodes && !profile) || (profileSource !== (profile?.source || defaultProfile)))) {\n            const src = profileSource;\n            fetch(`${process.env.PUBLIC_URL}/tubeAmp_Profiles/${src}.tapf`)\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    // simulating C++ fread\n                    let bufferPosition = 0;\n                    const profileBuffer = buffer.slice(0, profileSize);\n                    bufferPosition = profileSize;\n\n                    // 4 chars 1 byte each\n                    const signature = new Uint8Array(profileBuffer.slice(0, 4));\n                    const testStr = 'TaPf';\n                    // simulating C++ strncmp function for checking profile signature\n                    for (let i = 0; i < testStr.length; i++) {\n                        if (testStr.charCodeAt(i) !== signature[i]) return;\n                    }\n\n                    const profileVersion = new Uint32Array(profileBuffer.slice(4, 8))[0];\n\n                    const profileArr = new Float32Array(profileBuffer);\n\n                    let profile: Profile;\n\n                    profile = profileArr.reduce<object>((prevVal, currentVal, index) =>\n                        Object.assign(prevVal, { [ProfileProps[index + 1]]: currentVal }) // + 1 because source property is not from tapf\n                        , {}) as Profile;\n\n                    profile.source = src;\n                    profile.signature = testStr;\n                    profile.version = profileVersion;\n\n                    setProfile(profile);\n\n                    const impulseHeader = buffer.slice(bufferPosition, bufferPosition + impulseSize);\n                    bufferPosition += impulseSize;\n\n                    const impulseHeaderArr = new Int32Array(impulseHeader);\n                    const impulseSampleRate = impulseHeaderArr[0];\n                    const impulseSampleCount = impulseHeaderArr[2];\n                    const impulseSamplesSize = impulseSampleCount * 4;\n\n                    const impulseBuffer = buffer.slice(bufferPosition, bufferPosition + impulseSamplesSize);\n                    bufferPosition += impulseSamplesSize;\n\n                    if (impulseBuffer.byteLength !== impulseSamplesSize) {\n                        return;\n                    }\n\n                    const preampConvolver = new ConvolverNode(context);\n\n                    const bufferArr = new Float32Array(impulseBuffer);\n\n                    const resampledArr = new Float32Array(resample(bufferArr, impulseSampleRate, context.sampleRate));\n\n                    const audioBuffer = context.createBuffer(1, resampledArr.length, context.sampleRate);\n                    const audioData = audioBuffer.getChannelData(0);\n\n                    for (let i = 0; i < audioBuffer.length; i++) {\n                        audioData[i] = resampledArr[i];\n                    }\n\n                    preampConvolver.buffer = audioBuffer;\n\n                    onPluginReady([preampConvolver, node], tubeAmpAddr, id, profile);\n                });\n        }\n    }, [context, node, profile, onPluginReady, id, pluginNodes, profileSource]);\n\n    useEffect(() => {\n        const nentryParams = getControlsByType(node, 'nentry');\n\n        if (profile) {\n            nentryParams.forEach((descriptor) => {\n                node?.setParamValue(descriptor.address, profile[descriptor.label as keyof typeof ProfileProps] as number);\n            });\n        }\n    }, [node, profile]);\n\n    const onProfileChange = (e: ChangeEvent<HTMLSelectElement>) => {\n        setProfileSource(e.target.value);\n    };\n\n    if (!node) {\n        return <div>Start audio to load the plugin</div>;\n    }\n\n    const sliderParams = getControlsByType(node, 'vslider');\n\n    const handleChangeControl = (address: string, val: number) => {\n        node.setParamValue(address, val);\n    };\n\n    return (\n        <div className=\"plugin amp-head\">\n            <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\n            <label htmlFor=\"profile\">Choose Profile</label>\n            <select id=\"profile\" onChange={(e) => onProfileChange(e)} value={profileSource}>\n                {availableProfiles.map((source) => <option key={source} value={source}>{source}</option>)}\n            </select>\n            <div className=\"knobs-wrapper\" onMouseDown={stopEventPropagation}>\n                {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\n                    <div key={address} className=\"knob\">\n                        <label htmlFor={address}>{label}</label>\n                        <Knob\n                            size={50}\n                            angleOffset={220}\n                            angleRange={280}\n                            min={min}\n                            max={max}\n                            className=\"styledKnob\"\n                            value={init || 0.01} // because it renders incorrectly if 0\n                            onChange={(val: number) => handleChangeControl(address, val)}\n                        >\n                            <Arc\n                                arcWidth={0.75}\n                            />\n                            <circle r=\"20\" cx=\"25\" cy=\"25\" />\n                            <Pointer\n                                width={1}\n                                height={17.5}\n                                radius={5}\n                                type=\"rect\"\n                                color=\"#fff\"\n                            />\n                        </Knob>\n\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n};\n\nexport default TubeAmp;\n","import { useState, useEffect, ChangeEvent } from 'react';\nimport './Cabinet.css';\n\nconst positions = ['center', 'cone', 'edge'];\nconst irs = ['1on-preshigh', '1on-pres8', '1on-pres5'];\n\nconst cabConvolverFromArrayBuffer = (audioContext: AudioContext, buffer: ArrayBuffer, cb?: (cab: ConvolverNode) => any) => {\n  const cabConvolver = new ConvolverNode(audioContext);\n  audioContext?.decodeAudioData(buffer, decoded => {\n    cabConvolver.buffer = decoded;\n    cb && cb(cabConvolver);\n  });\n};\n\ntype PropTypes = {\n  audioContext: AudioContext | null,\n  onCabReady: (cab: ConvolverNode) => void,\n};\n\nconst Cabinet = ({ audioContext, onCabReady }: PropTypes) => {\n  const [position, setPosition] = useState<number>(0);\n\n  const changePosition = () => {\n    setPosition((prevPosition) => {\n      return prevPosition === positions.length - 1 ? 0 : prevPosition + 1;\n    })\n  };\n\n  const onIRInput = (event: ChangeEvent<HTMLInputElement>) => {\n    if (audioContext && event.target.files?.length) {\n      event.target.files[0].arrayBuffer().then(buffer => cabConvolverFromArrayBuffer(audioContext, buffer, onCabReady));\n    }\n  }\n\n  useEffect(() => {\n    if (audioContext) {\n      fetch(`${process.env.PUBLIC_URL}/ir/${irs[position]}.wav`)\n        .then(response => response.arrayBuffer())\n        .then(buffer => cabConvolverFromArrayBuffer(audioContext, buffer, onCabReady));\n    }\n  }, [position, audioContext, onCabReady]);\n\n  return (\n    <>\n      <div className=\"cabinet\" onClick={changePosition}>\n        <img className=\"speaker\" alt=\"Guitar Speaker\" src={`${process.env.PUBLIC_URL}/speaker.png`} />\n        <img className={`mic mic--${positions[position]}`} alt=\"Microphone\" src={`${process.env.PUBLIC_URL}/shure_sm57.png`} />\n      </div>\n      <div className=\"ir-input\">\n        <label htmlFor=\"ir\">Choose your IR</label>\n        <input type=\"file\" id=\"ir\" accept=\"audio/*\" onChange={onIRInput} />\n      </div>\n    </>\n  );\n};\n\nexport default Cabinet;\n","import React from 'react';\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams';\nimport CustomNodeModel from './CustomNodeModel';\nimport styled from '@emotion/styled'\n\nconst Wrapper = styled.div`\n    .plugin-port {\n        width: 16px;\n        height: 16px;\n        z-index: 10;\n        background: rgba(0, 0, 0, 0.5);\n        border-radius: 8px;\n        cursor: pointer;\n        &:hover {\n            background: rgba(0, 0, 0, 1);\n        }\n        position: absolute;\n        top: 50%;\n\n        &.port-in {\n            left: 0%;\n        }\n        &.port-out {\n            right: 0%;\n        }\n    }\n`;\n\nexport interface CustomWidgetProps {\n    node: CustomNodeModel,\n    engine: DiagramEngine,\n}\n\nclass CustomNodeWidget extends React.Component<CustomWidgetProps>{\n    render() {\n        const InPort = this.props.node.getPort('In');\n        const OutPort = this.props.node.getPort('Out');\n\n        return (<Wrapper>\n            {this.props.node.plugin}\n            {InPort && <PortWidget className=\"plugin-port port-in\" port={InPort} engine={this.props.engine} />}\n            {OutPort && <PortWidget className=\"plugin-port port-out\" port={OutPort} engine={this.props.engine} />}\n        </Wrapper>);\n    }\n};\n\nexport default CustomNodeWidget;\n","import { PathFindingLinkModel } from \"@projectstorm/react-diagrams-routing\";\nimport { DefaultPortModel } from \"@projectstorm/react-diagrams-defaults\";\n\nclass CustomPortModel extends DefaultPortModel {\n    createLinkModel() {\n        return new PathFindingLinkModel();\n    }\n}\n\nexport default CustomPortModel;\n","import { NodeModel, NodeModelGenerics } from '@projectstorm/react-diagrams';\n\nimport CustomPortModel from './CustomPortModel';\n\nexport interface CustomNodeModelGenerics {\n    PLUGIN: any,\n}\n\nclass CustomNodeModel extends NodeModel<NodeModelGenerics & CustomNodeModelGenerics> {\n    constructor(public plugin: JSX.Element, public pluginIndex: number) {\n        super({\n            type: 'plugin',\n        });\n\n        this.addPort(new CustomPortModel(true, 'In', ''));\n        this.addPort(new CustomPortModel(false, 'Out', ''));\n    }\n}\n\nexport default CustomNodeModel;\n","import { AbstractReactFactory, GenerateModelEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nimport CustomNodeWidget from './CustomNodeWidget';\nimport CustomNodeModel from './CustomNodeModel';\n\nclass CustomNodeFactory extends AbstractReactFactory<CustomNodeModel, DiagramEngine> {\n    constructor() {\n        super('plugin');\n    }\n\n    generateReactWidget(event: any): JSX.Element {\n        return <CustomNodeWidget engine={this.engine} node={event.model} />;\n    }\n\n    generateModel(event: GenerateModelEvent) {\n        return new CustomNodeModel(<></>, 0);\n    }\n}\n\nexport default CustomNodeFactory;\n","import { useEffect, useState, useRef } from 'react';\nimport createEngine, {\n    DefaultLinkModel,\n    DefaultPortModel,\n    DiagramEngine,\n    DagreEngine,\n    DiagramModel,\n    NodeModel,\n    PathFindingLinkFactory,\n    PathFindingLinkModel,\n    PortModel,\n    DefaultNodeModel,\n    LinkModel,\n    NodeModelListener,\n} from '@projectstorm/react-diagrams';\nimport {\n    CanvasWidget,\n    BaseEvent,\n    BaseListener\n} from '@projectstorm/react-canvas-core';\nimport isEqual from 'lodash/isEqual';\n\nimport './Diagram.css';\nimport CustomNodeFactory from './CustomNodeFactory';\nimport CustomNodeModel from './CustomNodeModel';\n\nconst removePortLinks = (port: PortModel, linkToExclude?: PathFindingLinkModel): void => {\n    const links = port.getLinks();\n    if (Object.keys(links).length > (linkToExclude ? 1 : 0)) {\n        Object.entries(links).forEach((entry) => {\n            const link = entry[1];\n            if (link !== linkToExclude) {\n                link.remove();\n            }\n        });\n    }\n}\n\nconst getSignalChain = (model: DiagramModel, inputNodeID: string) => {\n    const signalChain: number[] = [];\n    let adjacentLinks: { [id: string]: LinkModel; } | undefined;\n    let link: LinkModel;\n    let node: NodeModel = model.getNode(inputNodeID);\n    const nodes = model.getNodes();\n\n    for (let i = 0; i < nodes.length - 1; i++) {\n        adjacentLinks = (node as DefaultNodeModel)\n            .getPort('Out')?.getLinks();\n\n        if (!adjacentLinks || !Object.keys(adjacentLinks).length) {\n            return null;\n        }\n\n        link = (Object.entries(\n            adjacentLinks as {})[0][1] as LinkModel);\n\n        if (link.getSourcePort().getNode() === node) {\n            node = link.getTargetPort().getNode();\n        } else {\n            node = link.getSourcePort().getNode();\n        }\n\n        if (node instanceof CustomNodeModel) {\n            signalChain.push(node.pluginIndex);\n        }\n    }\n\n    return signalChain;\n}\n\ntype PropTypes = {\n    plugins: JSX.Element[],\n    setPluginsOrder: Function,\n    addPlugin: Function,\n    pluginsOrder: number[] | null,\n};\n\nconst Diagram = ({ plugins, setPluginsOrder, pluginsOrder, addPlugin }: PropTypes) => {\n    const [engine, setEngine] = useState<DiagramEngine>();\n    const pluginsRef = useRef<typeof plugins>([]); // used to maintain previous properties\n    const pluginsOrderRef = useRef<typeof pluginsOrder>([]);\n\n    useEffect(() => {\n        const diagramEngine = createEngine({ registerDefaultZoomCanvasAction: false });\n        diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n        setEngine(diagramEngine);\n    }, []);\n\n    useEffect(() => {\n        const pluginsOrderChanged = !isEqual(pluginsOrderRef.current, pluginsOrder);\n        const pluginAdded = pluginsOrder && pluginsOrderRef.current && (pluginsOrderRef.current as number[]).length < pluginsOrder.length;\n\n        if (engine && (pluginAdded || (pluginsRef.current !== plugins && (pluginsOrderChanged || !pluginsOrder)))) {\n            let model = engine.getModel();\n            let node: NodeModel;\n            let links: DefaultLinkModel[] = [];\n            const renderedPluginsLength = pluginsOrder ? pluginsOrder.length : plugins.length;\n            const newPluginIndex = pluginsOrder ? pluginsOrder[pluginsOrder.length - 1] : renderedPluginsLength - 1;\n\n            // when new plugin is added on prerendered pedalboard\n            if (model && model.getNodes().length - 2 < renderedPluginsLength) {\n                node = new CustomNodeModel(pluginsOrder ? plugins[newPluginIndex as number] : plugins[plugins.length - 1], newPluginIndex);\n\n                let outputNode = model.getNodes().filter(n => n instanceof DefaultNodeModel && (n as DefaultNodeModel).getOptions().name === 'Output')[0];\n                let outputPort = outputNode.getPort('In') as DefaultPortModel;\n                let outputLink = Object.keys(outputPort.getLinks()).length && Object.entries(outputPort.getLinks())[0][1];\n                outputLink && removePortLinks(outputPort);\n\n                let connectedToOutputNodePort = outputLink && (outputLink.getTargetPort().getNode() === outputNode ? outputLink.getSourcePort() : outputLink.getTargetPort());\n\n                links = [\n                    (node.getPort('Out') as DefaultPortModel).link(outputPort),\n                ];\n\n                outputLink && links.push((connectedToOutputNodePort as DefaultPortModel).link(node.getPort('In') as DefaultPortModel));\n\n                model.addAll(node, ...links);\n            }\n            // when initializing diagram\n            else if (!pluginsOrder) {\n                let nodes: NodeModel[] = [];\n\n                const pathfinding = engine.getLinkFactories().getFactory<PathFindingLinkFactory>(PathFindingLinkFactory.NAME);\n\n                plugins.forEach((plugin, i) => {\n                    node = new CustomNodeModel(plugin, i);\n                    nodes.push(node);\n                    if (i > 0) {\n                        links.push((nodes[i - 1].getPort('Out') as DefaultPortModel).link(nodes[i].getPort('In') as DefaultPortModel, pathfinding));\n                    }\n                });\n\n                // binding input and output audio signal nodes\n                nodes = [new DefaultNodeModel({ name: 'Input' }), ...nodes];\n                nodes.push(new DefaultNodeModel({ name: 'Output' }));\n\n                const disableDeleteListener = {\n                    eventWillFire: (event: BaseEvent & { function: string; }) => {\n                        if (event.function === 'entityRemoved') {\n                            event.stopPropagation();\n                        }\n                    }\n                };\n\n                nodes[0].registerListener(disableDeleteListener as NodeModelListener);\n                nodes[nodes.length - 1].registerListener(disableDeleteListener as NodeModelListener);\n\n                if (nodes.length > 2) {\n                    links = [\n                        (nodes[0] as DefaultNodeModel)\n                            .addPort(new DefaultPortModel({ name: 'Out' }))\n                            .link(nodes[1].getPort('In') as DefaultPortModel, pathfinding),\n                        ...links\n                    ];\n\n                    links.push(\n                        (nodes[nodes.length - 2] as any)\n                            .getPort('Out')\n                            .link(nodes[nodes.length - 1].addPort(new DefaultPortModel({ name: 'In' })), pathfinding)\n                    );\n                }\n\n                model = new DiagramModel();\n                model.addAll(...nodes, ...links);\n                engine.setModel(model);\n\n                type EventType = BaseEvent & { function: string; link: PathFindingLinkModel; isCreated: boolean; };\n\n                const listener = {\n                    eventDidFire: (event: EventType) => {\n                        if (event.function === 'linksUpdated') {\n                            const newLink = event.link;\n                            const sourcePort = newLink.getSourcePort();\n\n                            // remove existing links when relinking\n                            removePortLinks(sourcePort, newLink);\n\n                            if (event.isCreated) {\n                                // fired when linking to target port is complete\n                                // disables chaining plugin into itself\n                                newLink.registerListener({\n                                    targetPortChanged: (event: any) => {\n                                        if (event.port.getParent() === sourcePort.getParent()) {\n                                            newLink.remove();\n                                        } else {\n                                            removePortLinks(event.port, newLink);\n                                        }\n\n                                        const signalChain = getSignalChain(model, nodes[0].getID());\n                                        signalChain && setPluginsOrder(signalChain);\n                                    }\n                                })\n                            }\n                        }\n                    },\n                };\n\n                model.registerListener(listener as BaseListener);\n\n                const state = engine.getStateMachine().getCurrentState();\n                if (state) {\n                    (state as any).dragCanvas.config.allowDrag = false;\n                }\n\n            }\n\n            setTimeout(() => {\n                const dagreEngine = new DagreEngine({\n                    graph: {\n                        rankdir: 'LR',\n                        ranker: 'longest-path',\n                        marginx: 550,\n                        marginy: 550,\n                        ranksep: 25,\n                    },\n                    includeLinks: true\n                });\n\n                dagreEngine.redistribute(model);\n                engine\n                    .getLinkFactories()\n                    .getFactory<PathFindingLinkFactory>(PathFindingLinkFactory.NAME)\n                    .calculateRoutingMatrix();\n\n                engine.repaintCanvas();\n            }, 1000);\n\n            pluginsRef.current = plugins;\n        }\n\n        if (pluginsOrderChanged) {\n            pluginsOrderRef.current = pluginsOrder;\n        }\n    }, [plugins, engine, pluginsOrder, setPluginsOrder, pluginsRef]);\n\n    if (!engine || !engine.getModel()) {\n        return null;\n    }\n\n    return (\n        <div onDrop={event => {\n            const data = event.dataTransfer.getData('plugin');\n            addPlugin(data);\n        }}\n            className=\"canvas-wrapper\"\n            onDragOver={event => event.preventDefault()}>\n            <CanvasWidget className=\"canvas\" engine={engine} />\n        </div>\n    );\n}\n\nexport default Diagram;\n","type PropTypes = {\n    plugins: string[],\n}\n\nconst PluginsTrayWidget = ({ plugins }: PropTypes) => {\n    return (\n        <div>\n            {plugins.map((plugin, index) =>\n                <div key={index} draggable={true} onDragStart={event => event.dataTransfer.setData('plugin', plugin)}>\n                    {plugin}\n                </div>)}\n        </div>\n    );\n};\n\nexport default PluginsTrayWidget;\n","import './Details.css';\n\nconst Details = () => {\n    return (\n        <div className=\"details\">\n            <div>\n                <a href=\"https://github.com/olegkapitonov/Kapitonov-Plugins-Pack\">(Kapitonov Plugins Pack)</a> by Oleg Kapitonov\n            </div>\n            <div>\n                Contact me at my <a href=\"mailto:kotekutalia@gmail.com\">email address</a>\n            </div>\n            <div>\n                Official <a href=\"https://github.com/Kutalia/react-webaudio-5150\">GitHub repository</a>\n            </div>\n            <div>\n                Report bugs <a href=\"https://github.com/Kutalia/react-webaudio-5150/issues\">here</a>\n            </div>\n            <div>\n                My story of building the app on <a href=\"https://kutalia.medium.com/how-i-ported-native-musical-plugins-to-javascript-in-depth-dafa014dae01\">Medium</a>\n            </div>\n        </div>\n    );\n};\n\nexport default Details;\n","import { useState, useEffect, ChangeEvent } from 'react';\n\ntype PropTypes = {\n    onChange: Function;\n}\n\ntype Devices = Array<{\n    id: string,\n    label: string,\n}>;\n\nconst InputDeviceSelect = ({ onChange }: PropTypes) => {\n    const [devices, setDevices] = useState<Devices>([]);\n\n    useEffect(() => {\n        navigator.mediaDevices.enumerateDevices()\n            .then(devices => setDevices(Object.entries(devices)\n                .filter(entry => entry[1].kind === 'audioinput').map(entry => ({ id: entry[1].deviceId, label: entry[1].label, }))));\n    }, [onChange]);\n\n    if (!devices.length) {\n        return null;\n    }\n\n    const handleDeviceSelection = (e: ChangeEvent<HTMLSelectElement>) => {\n        onChange(e.target.value);\n    }\n\n    return (\n        <div>\n            <p>Choose your input device</p>\n            <select onChange={handleDeviceSelection}>\n                {devices.map(({ id, label }) => (\n                    <option key={id} value={id}>{label}</option>\n                ))}\n            </select>\n        </div>\n    );\n};\n\nexport default InputDeviceSelect;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}