{"version":3,"sources":["features/tubeAmp/profile.ts","features/pedal/index.tsx","App.tsx","features/tubeAmp/index.tsx","features/cabinet/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ProfileProps","Pedal","index","sourceUrl","context","factory","compiler","onPluginReady","useState","node","setNode","fetchRef","useRef","useEffect","current","fetch","then","resp","text","compileNode","sliderParams","fDescriptor","filter","type","className","fJSONDsp","name","map","address","init","label","min","max","step","htmlFor","toUpperCase","size","angleOffset","angleRange","value","onChange","val","setParamValue","handleChangeControl","arcWidth","color","radius","width","marginBottom","InputModes","getControlsByType","ctrlType","TubeAmp","profile","setProfile","resamplerReady","setResamplerReady","faustNode","SpeexResampler","initPromise","response","arrayBuffer","buffer","bufferPosition","profileBuffer","slice","signature","Uint8Array","testStr","i","length","charCodeAt","profileVersion","Uint32Array","Float32Array","reduce","prevVal","currentVal","Object","assign","version","impulseHeader","impulseHeaderArr","Int32Array","impulseSampleRate","impulseSamplesSize","impulseBuffer","byteLength","preampConvolver","ConvolverNode","resampler","sampleRate","bufferArr","Int16Array","res","processChunk","resampledArr","audioBuffer","createBuffer","audioData","getChannelData","nentryParams","forEach","descriptor","r","cx","cy","height","positions","irs","Cabinet","audioContext","onCabReady","position","setPosition","decodeAudioData","decoded","cabConvolver","onClick","prevPosition","alt","src","initialState","lineInStreamSource","diTrackStreamSource","inputMode","plugins","allPluginsTailNode","faustCompiler","faustFactory","faustCode","App","streamSource","state","setState","diAudioRef","Audio","resumeAudioContext","resume","Promise","resolve","a","AudioContext","latencyHint","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","stream","createMediaStreamSource","prevState","MIC","FaustModule","module","Faust","createCompiler","createLibFaust","createMonoFactory","DI","useCallback","nodes","disconnect","destination","useMemo","keys","connect","plugin","reverse","prevPlugin","currentPlugin","pluginTailNode","prevNode","currentNode","firstNode","disabled","controls","ref","onPlay","audioElement","createMediaElementSource","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7c20f7e.chunk.js","sourcesContent":["// Structure with tubeAmp model\r\n// parameters.\r\n\r\nexport enum ProfileProps {\r\n    signature, version, preamp_level, preamp_bias, preamp_Kreg, preamp_Upor,\r\n    tonestack_low_freq, tonestack_low_band, tonestack_middle_freq, tonestack_middle_band, tonestack_high_freq, tonestack_high_band,\r\n    amp_level, amp_bias, amp_Kreg, amp_Upor, sag_time, sag_coeff, output_level,\r\n}\r\n\r\nexport type ProfilePropTypes = [string, ...number[]];\r\n\r\nexport type ProfilePropsUnion = keyof typeof ProfileProps;\r\n\r\nexport type Profile = {\r\n    [k in ProfilePropsUnion]: ProfilePropTypes[typeof ProfileProps[k]]\r\n}\r\n\r\n// export interface Profile\r\n// {\r\n//     signature: string; // 4 chars, 4 bytes in total\r\n    \r\n//     version: number; // uint32\r\n    \r\n//     preamp_level: number; // 4 byte float\r\n//     preamp_bias: number; // 4 byte float\r\n//     preamp_Kreg: number; // 4 byte float\r\n//     preamp_Upor: number; // 4 byte float\r\n    \r\n//     tonestack_low_freq: number; // 4 byte float\r\n//     tonestack_low_band: number; // 4 byte float\r\n//     tonestack_middle_freq: number; // 4 byte float\r\n//     tonestack_middle_band: number; // 4 byte float\r\n//     tonestack_high_freq: number; // 4 byte float\r\n//     tonestack_high_band: number; // 4 byte float\r\n    \r\n//     amp_level: number; // 4 byte float\r\n//     amp_bias: number; // 4 byte float\r\n//     amp_Kreg: number; // 4 byte float\r\n//     amp_Upor: number; // 4 byte float\r\n    \r\n//     sag_time: number; // 4 byte float\r\n//     sag_coeff: number; // 4 byte float\r\n    \r\n//     output_level: number; // 4 byte float\r\n// }\r\n\r\nexport const profileSize = 76; // 19 * 4, size in bytes\r\n\r\n// structure of\r\n// impulse response data\r\n// in *.tapf profile file\r\n\r\nexport interface Impulse {\r\n    sample_rate: number; // 4 byte int\r\n    channel: number; // 4 byte int\r\n    sample_count: number; // 4 byte int\r\n}\r\n\r\nexport const impulseSize = 12;\r\n","///<reference types=\"@grame/libfaust\" />\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Knob, Pointer, Arc, Value } from 'rc-knob';\r\n\r\nexport type nodeType = Faust.FaustMonoNode | null;\r\n\r\ntype propTypes = {\r\n  index: number,\r\n  sourceUrl: string,\r\n  context: AudioContext | null,\r\n  factory: Faust.MonoFactory | null,\r\n  compiler: Faust.Compiler | null,\r\n  onPluginReady: (node: nodeType[], index: number) => void,\r\n};\r\n\r\ntype descriptorType = {\r\n  address: string,\r\n  index: number,\r\n  init: number,\r\n  label: string,\r\n  max: number,\r\n  min: number,\r\n  step: number,\r\n  type: string,\r\n};\r\n\r\nconst Pedal = ({ index, sourceUrl, context, factory, compiler, onPluginReady }: propTypes) => {\r\n  const [node, setNode] = useState<nodeType>();\r\n\r\n  const fetchRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    if (factory && context && compiler && !node && !fetchRef.current) {\r\n      fetch(sourceUrl).then(resp => resp.text()).then(text => {\r\n        fetchRef.current = true;\r\n        factory.compileNode(context, 'Pedal' + index, compiler, text, '-ftz 2', false, 128).then(node => {\r\n          setNode(node);\r\n          onPluginReady([node], index);\r\n        });\r\n      });\r\n    }\r\n  }, [sourceUrl, context, factory, compiler, onPluginReady, index, node, fetchRef]);\r\n\r\n  if (!node) return null;\r\n\r\n  const sliderParams = (node as any).fDescriptor.filter(({ type }: descriptorType) => type === 'vslider' || type === 'hslider');\r\n\r\n  const handleChangeControl = (address: string, val: number) => {\r\n    node.setParamValue(address, val);\r\n  };\r\n\r\n  return (\r\n    <div className=\"plugin pedal\">\r\n      <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\r\n      <div className=\"knobs-wrapper\">\r\n        {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\r\n          <div key={address} className=\"knob\">\r\n            <label htmlFor={address}>{label.toUpperCase()}</label>\r\n            <Knob\r\n              size={50}\r\n              angleOffset={220}\r\n              angleRange={280}\r\n              min={min}\r\n              max={max}\r\n              value={init || 0.01}\r\n              onChange={(val: number) => handleChangeControl(address, val)}\r\n            >\r\n              <Arc\r\n                arcWidth={2.5}\r\n                color=\"#FC5A96\"\r\n                radius={18.75}\r\n              />\r\n              <Pointer\r\n                width={2.5}\r\n                radius={20}\r\n                type=\"circle\"\r\n                color=\"#180094\"\r\n              />\r\n              <Value\r\n                marginBottom={20}\r\n                className=\"value\"\r\n              />\r\n            </Knob>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Pedal;\r\n","///<reference types=\"@grame/libfaust\" />\r\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\r\nimport './App.css';\r\n\r\nimport Pedal, { nodeType as pedalNodeType } from './features/pedal';\r\nimport TubeAmp, { nodeType as tubeAmpNodeType } from './features/tubeAmp';\r\nimport Cabinet from './features/cabinet';\r\n\r\ndeclare var FaustModule: any;\r\n\r\nenum InputModes {\r\n  DI,\r\n  MIC\r\n}\r\n\r\ninterface StateType {\r\n  audioContext: AudioContext | null,\r\n  lineInStreamSource: MediaStreamAudioSourceNode | null,\r\n  diTrackStreamSource: MediaElementAudioSourceNode | null,\r\n  inputMode: InputModes | null,\r\n  cabConvolver: ConvolverNode | null,\r\n  plugins: Array<Array<pedalNodeType | tubeAmpNodeType>>,\r\n  allPluginsTailNode: AudioNode | pedalNodeType | tubeAmpNodeType | null,\r\n  faustCompiler: Faust.Compiler | null,\r\n  faustFactory: Faust.MonoFactory | null,\r\n  faustCode: string,\r\n}\r\n\r\nconst initialState: StateType = {\r\n  audioContext: null,\r\n  lineInStreamSource: null,\r\n  diTrackStreamSource: null,\r\n  inputMode: null,\r\n  cabConvolver: null,\r\n  plugins: [],\r\n  allPluginsTailNode: null,\r\n  faustCompiler: null,\r\n  faustFactory: null,\r\n  faustCode: '',\r\n};\r\n\r\nfunction App() {\r\n  const [state, setState] = useState<StateType>(initialState);\r\n\r\n  const { audioContext, lineInStreamSource, diTrackStreamSource } = state;\r\n\r\n  const diAudioRef = useRef(new Audio());\r\n\r\n  function resumeAudioContext(audioContext: AudioContext) {\r\n    if (audioContext.state === 'suspended' || audioContext.state !== 'running') {\r\n      return audioContext.resume();\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async function initGuitarInputFromLineIn() {\r\n    // IRs in kpp_tubeamp *.tapf files are 48000 Hz\r\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\r\n\r\n    const stream = await navigator.mediaDevices.getUserMedia({\r\n      audio: {\r\n        echoCancellation: false,\r\n        autoGainControl: false,\r\n        noiseSuppression: false,\r\n        latency: 0\r\n      }\r\n    });\r\n\r\n    await resumeAudioContext(audioContext);\r\n\r\n    const lineInStreamSource = audioContext.createMediaStreamSource(stream);\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      audioContext,\r\n      lineInStreamSource,\r\n      diTrackStreamSource,\r\n      inputMode: InputModes.MIC,\r\n    }));\r\n  }\r\n\r\n  function onDiPlay() {\r\n    if (diTrackStreamSource) {\r\n      return;\r\n    }\r\n    \r\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\r\n    const audioElement = diAudioRef.current;\r\n\r\n    resumeAudioContext(audioContext).then(() => {\r\n      const diTrackStreamSource = audioContext.createMediaElementSource(audioElement);\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        audioContext,\r\n        lineInStreamSource,\r\n        diTrackStreamSource,\r\n        inputMode: InputModes.DI\r\n      }));\r\n    });\r\n  }\r\n\r\n  useEffect(() => {\r\n    FaustModule().then((module: any) => {\r\n      let compiler = Faust.createCompiler(Faust.createLibFaust(module) as Faust.LibFaust);\r\n\r\n      let factory = Faust.createMonoFactory();\r\n\r\n      setState((prevState) => ({\r\n        ...prevState,\r\n        faustFactory: factory,\r\n        faustCompiler: compiler,\r\n      }));\r\n    });\r\n  }, []);\r\n\r\n  let streamSource: typeof diTrackStreamSource | typeof lineInStreamSource;\r\n\r\n  switch (state.inputMode) {\r\n    case InputModes.DI: streamSource = diTrackStreamSource; break;\r\n    case InputModes.MIC: streamSource = lineInStreamSource; break;\r\n    default: streamSource = diTrackStreamSource || lineInStreamSource;\r\n  }\r\n\r\n  const onPluginReady = useCallback((nodes: (pedalNodeType | tubeAmpNodeType)[], index: number) => {\r\n    setState(prevState => {\r\n      const plugins = [...(prevState.plugins)];\r\n      plugins[index] = nodes;\r\n      return { ...prevState, plugins };\r\n    });\r\n  }, []);\r\n\r\n  const onCabReady = useCallback((cabConvolver: ConvolverNode) => {\r\n    setState(prevState => {\r\n      if (prevState.cabConvolver && prevState.audioContext && prevState.allPluginsTailNode) {\r\n        prevState.allPluginsTailNode.disconnect(prevState.cabConvolver);\r\n        prevState.cabConvolver.disconnect(prevState.audioContext.destination);\r\n      }\r\n      return { ...prevState, cabConvolver };\r\n    });\r\n  }, []);\r\n\r\n  const plugins = useMemo(() => [\r\n    <Pedal key={0} index={0} sourceUrl={'kpp_distruction.dsp'} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} />,\r\n    <TubeAmp key={1} index={1} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} />\r\n  ], [state.faustFactory, state.faustCompiler, state.audioContext, onPluginReady]);\r\n\r\n  useEffect(() => {\r\n    if (state.cabConvolver && state.allPluginsTailNode && Object.keys(state.allPluginsTailNode as object).length && state.audioContext) {\r\n      (state.allPluginsTailNode as AudioNode).connect(state.cabConvolver as ConvolverNode).connect(state.audioContext.destination);\r\n    }\r\n  }, [state.cabConvolver, state.allPluginsTailNode, state.audioContext]);\r\n\r\n  useEffect(() => {\r\n    if (!streamSource || !audioContext || state.plugins.length !== plugins.length\r\n      || state.plugins.filter(plugin => !!plugin).length !== plugins.length) {\r\n      return;\r\n    }\r\n\r\n    resumeAudioContext(audioContext).then(() => {\r\n      const allPluginsTailNode = [...state.plugins].reverse().reduce((prevPlugin, currentPlugin, index) => {\r\n        const pluginTailNode = currentPlugin.reduce((prevNode, currentNode, i) => {\r\n          return i !== 0\r\n            ? (prevNode as AudioNode).connect(currentNode as AudioNode)\r\n            : currentNode as AudioNode;\r\n        }, {});\r\n\r\n        return index === 0 ? pluginTailNode : (pluginTailNode as AudioNode).connect(prevPlugin as AudioNode);\r\n      }, {});\r\n\r\n      const firstNode = state.plugins[0][0];\r\n      (streamSource as AudioNode).connect(firstNode as AudioNode);\r\n\r\n      setState(prevState => ({ ...prevState, allPluginsTailNode: allPluginsTailNode as AudioNode }));\r\n    });\r\n  }, [state.plugins, plugins.length, streamSource, audioContext]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div>\r\n        Click <button disabled={!!lineInStreamSource} onClick={initGuitarInputFromLineIn}>here</button> to turn on your guitar input.\r\n      </div>\r\n      <div className=\"plugins-wrapper\">\r\n        {plugins}\r\n      </div>\r\n      <Cabinet audioContext={state.audioContext} onCabReady={onCabReady} />\r\n      <div>\r\n        <audio controls ref={diAudioRef} onPlay={onDiPlay}>\r\n          <source src=\"di/LasseMagoDI.mp3\" type=\"audio/mpeg\" />\r\n        </audio>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","///<reference types=\"@grame/libfaust\" />\r\nimport { useState, useEffect, useRef } from 'react';\r\nimport { Knob, Pointer, Arc } from 'rc-knob';\r\nimport SpeexResampler from 'speex-resampler';\r\n\r\nimport { Profile, ProfileProps, profileSize, impulseSize } from './profile';\r\n\r\nexport type nodeType = Faust.FaustMonoNode | AudioNode;\r\n\r\ntype propTypes = {\r\n    index: number, // relative index with other plugins\r\n    context: AudioContext | null,\r\n    factory: Faust.MonoFactory | null,\r\n    compiler: Faust.Compiler | null,\r\n    onPluginReady: (nodes: nodeType[], index: number) => void,\r\n};\r\n\r\ntype descriptorType = {\r\n    address: string,\r\n    index: number,\r\n    init: number,\r\n    label: string,\r\n    max: number,\r\n    min: number,\r\n    step: number,\r\n    type: string,\r\n};\r\n\r\nconst tubeAmpAddr = '/kpp_tubeamp.dsp';\r\n\r\nconst getControlsByType = (node: any, ctrlType: string): descriptorType[] => node ? (node).fDescriptor.filter(({ type }: descriptorType) => type === ctrlType) : [];\r\n\r\nconst TubeAmp = ({ index, context, factory, compiler, onPluginReady }: propTypes) => {\r\n    const [node, setNode] = useState<Faust.FaustMonoNode>();\r\n    const [profile, setProfile] = useState<Profile>();\r\n    const [resamplerReady, setResamplerReady] = useState<boolean>(false);\r\n    const fetchRef = useRef(false);\r\n\r\n    useEffect(() => {\r\n        if (!node && factory && context && compiler && !fetchRef.current) {\r\n            fetchRef.current = true;\r\n            fetch(tubeAmpAddr).then(resp => resp.text()).then(text => {\r\n                factory.compileNode(context, 'kpp_tubeamp', compiler, text, '-ftz 2', false, 128).then(faustNode => {\r\n                    if (faustNode) setNode(faustNode);\r\n                });\r\n            });\r\n        }\r\n    }, [context, factory, compiler, node, fetchRef]);\r\n\r\n    useEffect(() => {\r\n        SpeexResampler.initPromise.then(() => {\r\n            setResamplerReady(true);\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (context && node && !profile && resamplerReady) {\r\n            fetch('/tubeAmp_Profiles/v1.0/Modern Metal.tapf')\r\n                .then(response => response.arrayBuffer())\r\n                .then(buffer => {\r\n                    // simulating C++ fread\r\n                    let bufferPosition = 0;\r\n                    const profileBuffer = buffer.slice(0, profileSize);\r\n                    bufferPosition = profileSize;\r\n\r\n                    // 4 chars 1 byte each\r\n                    const signature = new Uint8Array(profileBuffer.slice(0, 4));\r\n                    const testStr = 'TaPf';\r\n                    // simulating C++ strncmp function for checking profile signature\r\n                    for (let i = 0; i < testStr.length; i++) {\r\n                        if (testStr.charCodeAt(i) !== signature[i]) return;\r\n                    }\r\n\r\n                    const profileVersion = new Uint32Array(profileBuffer.slice(4, 8))[0];\r\n\r\n                    const profileArr = new Float32Array(profileBuffer);\r\n\r\n                    let profile: Profile;\r\n\r\n                    profile = profileArr.reduce<object>((prevVal, currentVal, index) =>\r\n                        Object.assign(prevVal, { [ProfileProps[index]]: currentVal })\r\n                        , {}) as Profile;\r\n\r\n                    profile.signature = testStr;\r\n                    profile.version = profileVersion;\r\n\r\n                    setProfile(profile);\r\n\r\n                    const impulseHeader = buffer.slice(bufferPosition, bufferPosition + impulseSize);\r\n                    bufferPosition += impulseSize;\r\n\r\n                    const impulseHeaderArr = new Int32Array(impulseHeader);\r\n                    const impulseSampleRate = impulseHeaderArr[0];\r\n                    const impulseSampleCount = impulseHeaderArr[2];\r\n                    const impulseSamplesSize = impulseSampleCount * 4;\r\n\r\n                    const impulseBuffer = buffer.slice(bufferPosition, bufferPosition + impulseSamplesSize);\r\n                    bufferPosition += impulseSamplesSize;\r\n\r\n                    if (impulseBuffer.byteLength !== impulseSamplesSize) {\r\n                        return;\r\n                    }\r\n\r\n                    const preampConvolver = new ConvolverNode(context);\r\n\r\n                    const resampler = new SpeexResampler(1, impulseSampleRate, context.sampleRate, 10);\r\n                    const bufferArr = new Int16Array(impulseBuffer);\r\n                    const res = resampler.processChunk(bufferArr as any);\r\n                    const resampledArr = new Float32Array(res);\r\n\r\n                    const audioBuffer = context.createBuffer(1, res.byteLength / 2, context.sampleRate);\r\n                    const audioData = audioBuffer.getChannelData(0);\r\n\r\n                    for (let i = 0; i < audioBuffer.length; i++) {\r\n                        audioData[i] = resampledArr[i];\r\n                    }\r\n\r\n                    preampConvolver.buffer = audioBuffer;\r\n\r\n                    onPluginReady([preampConvolver, node], index);\r\n                });\r\n        }\r\n    }, [context, node, profile, onPluginReady, index, resamplerReady]);\r\n\r\n    useEffect(() => {\r\n        const nentryParams = getControlsByType(node, 'nentry');\r\n\r\n        if (profile) {\r\n            nentryParams.forEach((descriptor) => {\r\n                node?.setParamValue(descriptor.address, profile[descriptor.label as keyof typeof ProfileProps] as number)\r\n            });\r\n        }\r\n    }, [node, profile])\r\n\r\n    if (!node) return null;\r\n\r\n    const sliderParams = getControlsByType(node, 'vslider');\r\n\r\n    const handleChangeControl = (address: string, val: number) => {\r\n        node.setParamValue(address, val);\r\n    };\r\n\r\n    return (\r\n        <div className=\"plugin amp-head\">\r\n            <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\r\n            <div className=\"knobs-wrapper\">\r\n                {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\r\n                    <div key={address} className=\"knob\">\r\n                        <label htmlFor={address}>{label}</label>\r\n                        <Knob\r\n                            size={50}\r\n                            angleOffset={220}\r\n                            angleRange={280}\r\n                            min={min}\r\n                            max={max}\r\n                            className=\"styledKnob\"\r\n                            value={init || 0.01} // because it renders incorrectly if 0\r\n                            onChange={(val: number) => handleChangeControl(address, val)}\r\n                        >\r\n                            <Arc\r\n                                arcWidth={0.75}\r\n                            />\r\n                            <circle r=\"20\" cx=\"25\" cy=\"25\" />\r\n                            <Pointer\r\n                                width={1}\r\n                                height={17.5}\r\n                                radius={5}\r\n                                type=\"rect\"\r\n                                color=\"#fff\"\r\n                            />\r\n                        </Knob>\r\n\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default TubeAmp;\r\n","import { useState, useEffect } from 'react';\r\nimport './Cabinet.css';\r\n\r\nconst positions = ['center', 'cone', 'edge'];\r\nconst irs = ['1on-preshigh', '1on-pres8', '1on-pres5'];\r\n\r\ntype PropTypes = {\r\n    audioContext: AudioContext | null,\r\n    onCabReady: (cab: ConvolverNode) => void,\r\n};\r\n\r\nconst Cabinet = ({ audioContext, onCabReady }: PropTypes) => {\r\n    const [position, setPosition] = useState<number>(0);\r\n\r\n    const changePosition = () => {\r\n        setPosition((prevPosition) => {\r\n            return prevPosition === positions.length - 1 ? 0 : prevPosition + 1;\r\n        })\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (audioContext) {\r\n          fetch(`/ir/${irs[position]}.wav`)\r\n            .then(response => response.arrayBuffer())\r\n            .then(buffer => {\r\n              audioContext.decodeAudioData(buffer, decoded => {\r\n                const cabConvolver = new ConvolverNode(audioContext);\r\n                cabConvolver.buffer = decoded;\r\n    \r\n                onCabReady(cabConvolver);\r\n              });\r\n            })\r\n        }\r\n      }, [position, audioContext, onCabReady]);\r\n\r\n    return (\r\n        <div className=\"cabinet\" onClick={changePosition}>\r\n            <img className=\"speaker\" alt=\"Guitar Speaker\" src=\"/speaker.png\" />\r\n            <img className={`mic mic--${positions[position]}`} alt=\"Microphone\" src=\"/shure_sm57.png\" />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Cabinet;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}