{"version":3,"sources":["features/tubeAmp/profile.ts","helpers/utils.ts","features/pedal/index.tsx","App.tsx","features/tubeAmp/index.tsx","features/cabinet/index.tsx","features/diagram/CustomNodeWidget.tsx","features/diagram/CustomPortModel.ts","features/diagram/CustomNodeModel.ts","features/diagram/CustomNodeFactory.tsx","features/diagram/index.tsx","reportWebVitals.ts","index.tsx"],"names":["ProfileProps","stopEventPropagation","e","stopPropagation","Pedal","index","sourceUrl","context","factory","compiler","onPluginReady","useState","node","setNode","fetchRef","useRef","useEffect","current","fetch","process","then","resp","text","compileNode","sliderParams","fDescriptor","filter","type","className","fJSONDsp","name","onMouseDown","map","address","init","label","min","max","step","htmlFor","toUpperCase","size","angleOffset","angleRange","value","onChange","val","setParamValue","handleChangeControl","arcWidth","color","radius","width","marginBottom","InputModes","getControlsByType","ctrlType","TubeAmp","profile","setProfile","resamplerReady","setResamplerReady","faustNode","SpeexResampler","initPromise","response","arrayBuffer","buffer","bufferPosition","profileBuffer","slice","signature","Uint8Array","testStr","i","length","charCodeAt","profileVersion","Uint32Array","Float32Array","reduce","prevVal","currentVal","Object","assign","version","impulseHeader","impulseHeaderArr","Int32Array","impulseSampleRate","impulseSamplesSize","impulseBuffer","byteLength","preampConvolver","ConvolverNode","resampler","sampleRate","bufferArr","Int16Array","res","processChunk","resampledArr","audioBuffer","createBuffer","audioData","getChannelData","nentryParams","forEach","descriptor","r","cx","cy","height","positions","irs","Cabinet","audioContext","onCabReady","position","setPosition","decodeAudioData","decoded","cabConvolver","onClick","prevPosition","alt","src","Wrapper","styled","div","CustomNodeWidget","InPort","this","props","getPort","OutPort","plugin","port","engine","React","Component","CustomPortModel","PathFindingLinkModel","DefaultPortModel","CustomNodeModel","addPort","NodeModel","CustomNodeFactory","event","model","AbstractReactFactory","removePortLinks","linkToExclude","links","getLinks","keys","entries","entry","link","remove","Diagram","plugins","setEngine","diagramEngine","createEngine","registerDefaultZoomCanvasAction","getNodeFactories","registerFactory","nodes","pathfinding","getLinkFactories","getFactory","PathFindingLinkFactory","NAME","push","DiagramModel","addAll","setModel","listener","eventDidFire","function","newLink","sourcePort","getSourcePort","console","log","isCreated","registerListener","targetPortChanged","getParent","state","getStateMachine","getCurrentState","dragCanvas","config","allowDrag","setTimeout","DagreEngine","graph","rankdir","ranker","marginx","marginy","includeLinks","redistribute","calculateRoutingMatrix","repaintCanvas","getModel","initialState","lineInStreamSource","diTrackStreamSource","inputMode","allPluginsTailNode","faustCompiler","faustFactory","faustCode","App","streamSource","setState","diAudioRef","Audio","resumeAudioContext","resume","Promise","resolve","a","AudioContext","latencyHint","navigator","mediaDevices","getUserMedia","audio","echoCancellation","autoGainControl","noiseSuppression","latency","stream","createMediaStreamSource","prevState","MIC","FaustModule","module","Faust","createCompiler","createLibFaust","createMonoFactory","DI","useCallback","disconnect","destination","useMemo","connect","reverse","prevPlugin","currentPlugin","pluginTailNode","prevNode","currentNode","firstNode","setPlugins","disabled","controls","ref","onPlay","audioElement","createMediaElementSource","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c45d0e9.chunk.js","sourcesContent":["// Structure with tubeAmp model\n// parameters.\n\nexport enum ProfileProps {\n    signature, version, preamp_level, preamp_bias, preamp_Kreg, preamp_Upor,\n    tonestack_low_freq, tonestack_low_band, tonestack_middle_freq, tonestack_middle_band, tonestack_high_freq, tonestack_high_band,\n    amp_level, amp_bias, amp_Kreg, amp_Upor, sag_time, sag_coeff, output_level,\n}\n\nexport type ProfilePropTypes = [string, ...number[]];\n\nexport type ProfilePropsUnion = keyof typeof ProfileProps;\n\nexport type Profile = {\n    [k in ProfilePropsUnion]: ProfilePropTypes[typeof ProfileProps[k]]\n}\n\n// export interface Profile\n// {\n//     signature: string; // 4 chars, 4 bytes in total\n    \n//     version: number; // uint32\n    \n//     preamp_level: number; // 4 byte float\n//     preamp_bias: number; // 4 byte float\n//     preamp_Kreg: number; // 4 byte float\n//     preamp_Upor: number; // 4 byte float\n    \n//     tonestack_low_freq: number; // 4 byte float\n//     tonestack_low_band: number; // 4 byte float\n//     tonestack_middle_freq: number; // 4 byte float\n//     tonestack_middle_band: number; // 4 byte float\n//     tonestack_high_freq: number; // 4 byte float\n//     tonestack_high_band: number; // 4 byte float\n    \n//     amp_level: number; // 4 byte float\n//     amp_bias: number; // 4 byte float\n//     amp_Kreg: number; // 4 byte float\n//     amp_Upor: number; // 4 byte float\n    \n//     sag_time: number; // 4 byte float\n//     sag_coeff: number; // 4 byte float\n    \n//     output_level: number; // 4 byte float\n// }\n\nexport const profileSize = 76; // 19 * 4, size in bytes\n\n// structure of\n// impulse response data\n// in *.tapf profile file\n\nexport interface Impulse {\n    sample_rate: number; // 4 byte int\n    channel: number; // 4 byte int\n    sample_count: number; // 4 byte int\n}\n\nexport const impulseSize = 12;\n","import { UIEvent } from 'react'\n\nexport const stopEventPropagation = (e: UIEvent) => {\n    e.stopPropagation();\n};\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef } from 'react';\nimport { Knob, Pointer, Arc, Value } from 'rc-knob';\n\nimport { stopEventPropagation } from '../../helpers/utils';\n\nexport type nodeType = Faust.FaustMonoNode | null;\n\ntype propTypes = {\n  index: number,\n  sourceUrl: string,\n  context: AudioContext | null,\n  factory: Faust.MonoFactory | null,\n  compiler: Faust.Compiler | null,\n  onPluginReady: (node: nodeType[], index: number) => void,\n};\n\ntype descriptorType = {\n  address: string,\n  index: number,\n  init: number,\n  label: string,\n  max: number,\n  min: number,\n  step: number,\n  type: string,\n};\n\nconst Pedal = ({ index, sourceUrl, context, factory, compiler, onPluginReady }: propTypes) => {\n  const [node, setNode] = useState<nodeType>();\n\n  const fetchRef = useRef(false);\n\n  useEffect(() => {\n    if (factory && context && compiler && !node && !fetchRef.current) {\n      fetch(process.env.PUBLIC_URL + '/' + sourceUrl).then(resp => resp.text()).then(text => {\n        fetchRef.current = true;\n        factory.compileNode(context, 'Pedal' + index, compiler, text, '-ftz 2', false, 128).then(node => {\n          setNode(node);\n          onPluginReady([node], index);\n        });\n      });\n    }\n  }, [sourceUrl, context, factory, compiler, onPluginReady, index, node, fetchRef]);\n\n  if (!node) {\n    return <div>Start audio to load the plugin</div>;\n  }\n\n  const sliderParams = (node as any).fDescriptor.filter(({ type }: descriptorType) => type === 'vslider' || type === 'hslider');\n\n  const handleChangeControl = (address: string, val: number) => {\n    node.setParamValue(address, val);\n  };\n\n  return (\n    <div className=\"plugin pedal\">\n      <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\n      <div className=\"knobs-wrapper\" onMouseDown={stopEventPropagation}>\n        {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\n          <div key={address} className=\"knob\">\n            <label htmlFor={address}>{label.toUpperCase()}</label>\n            <Knob\n              size={50}\n              angleOffset={220}\n              angleRange={280}\n              min={min}\n              max={max}\n              value={init || 0.01}\n              onChange={(val: number) => handleChangeControl(address, val)}\n            >\n              <Arc\n                arcWidth={2.5}\n                color=\"#FC5A96\"\n                radius={18.75}\n              />\n              <Pointer\n                width={2.5}\n                radius={20}\n                type=\"circle\"\n                color=\"#180094\"\n              />\n              <Value\n                marginBottom={20}\n                className=\"value\"\n              />\n            </Knob>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n};\n\nexport default Pedal;\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport './App.css';\n\nimport Pedal, { nodeType as pedalNodeType } from './features/pedal';\nimport TubeAmp, { nodeType as tubeAmpNodeType } from './features/tubeAmp';\nimport Cabinet from './features/cabinet';\nimport Diagram from './features/diagram';\n\ndeclare var FaustModule: any;\n\nenum InputModes {\n  DI,\n  MIC\n}\n\nexport type PluginType = AudioNode | pedalNodeType | tubeAmpNodeType;\n\ninterface StateType {\n  audioContext: AudioContext | null,\n  lineInStreamSource: MediaStreamAudioSourceNode | null,\n  diTrackStreamSource: MediaElementAudioSourceNode | null,\n  inputMode: InputModes | null,\n  cabConvolver: ConvolverNode | null,\n  plugins: Array<Array<PluginType>>,\n  allPluginsTailNode: PluginType | null,\n  faustCompiler: Faust.Compiler | null,\n  faustFactory: Faust.MonoFactory | null,\n  faustCode: string,\n}\n\nconst initialState: StateType = {\n  audioContext: null,\n  lineInStreamSource: null,\n  diTrackStreamSource: null,\n  inputMode: null,\n  cabConvolver: null,\n  plugins: [],\n  allPluginsTailNode: null,\n  faustCompiler: null,\n  faustFactory: null,\n  faustCode: '',\n};\n\nfunction App() {\n  const [state, setState] = useState<StateType>(initialState);\n\n  const { audioContext, lineInStreamSource, diTrackStreamSource } = state;\n\n  const diAudioRef = useRef(new Audio());\n\n  function resumeAudioContext(audioContext: AudioContext) {\n    if (audioContext.state === 'suspended' || audioContext.state !== 'running') {\n      return audioContext.resume();\n    }\n    return Promise.resolve();\n  }\n\n  async function initGuitarInputFromLineIn() {\n    // IRs in kpp_tubeamp *.tapf files are 48000 Hz\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\n\n    const stream = await navigator.mediaDevices.getUserMedia({\n      audio: {\n        echoCancellation: false,\n        autoGainControl: false,\n        noiseSuppression: false,\n        latency: 0\n      }\n    });\n\n    await resumeAudioContext(audioContext);\n\n    const lineInStreamSource = audioContext.createMediaStreamSource(stream);\n    setState((prevState) => ({\n      ...prevState,\n      audioContext,\n      lineInStreamSource,\n      diTrackStreamSource,\n      inputMode: InputModes.MIC,\n    }));\n  }\n\n  function onDiPlay() {\n    if (diTrackStreamSource) {\n      return;\n    }\n\n    const audioContext = state.audioContext || new AudioContext({ latencyHint: 'interactive', });\n    const audioElement = diAudioRef.current;\n\n    resumeAudioContext(audioContext).then(() => {\n      const diTrackStreamSource = audioContext.createMediaElementSource(audioElement);\n      setState((prevState) => ({\n        ...prevState,\n        audioContext,\n        lineInStreamSource,\n        diTrackStreamSource,\n        inputMode: InputModes.DI\n      }));\n    });\n  }\n\n  useEffect(() => {\n    FaustModule().then((module: any) => {\n      let compiler = Faust.createCompiler(Faust.createLibFaust(module) as Faust.LibFaust);\n\n      let factory = Faust.createMonoFactory();\n\n      setState((prevState) => ({\n        ...prevState,\n        faustFactory: factory,\n        faustCompiler: compiler,\n      }));\n    });\n  }, []);\n\n  let streamSource: typeof diTrackStreamSource | typeof lineInStreamSource;\n\n  switch (state.inputMode) {\n    case InputModes.DI: streamSource = diTrackStreamSource; break;\n    case InputModes.MIC: streamSource = lineInStreamSource; break;\n    default: streamSource = diTrackStreamSource || lineInStreamSource;\n  }\n\n  const onPluginReady = useCallback((nodes: (pedalNodeType | tubeAmpNodeType)[], index: number) => {\n    setState(prevState => {\n      const plugins = [...(prevState.plugins)];\n      plugins[index] = nodes;\n      return { ...prevState, plugins };\n    });\n  }, []);\n\n  const onCabReady = useCallback((cabConvolver: ConvolverNode) => {\n    setState(prevState => {\n      if (prevState.cabConvolver && prevState.audioContext && prevState.allPluginsTailNode) {\n        prevState.allPluginsTailNode.disconnect(prevState.cabConvolver);\n        prevState.cabConvolver.disconnect(prevState.audioContext.destination);\n      }\n      return { ...prevState, cabConvolver };\n    });\n  }, []);\n\n  const plugins = useMemo(() => [\n    <Pedal key={0} index={0} sourceUrl={'kpp_distruction.dsp'} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} />,\n    <TubeAmp key={1} index={1} compiler={state.faustCompiler} factory={state.faustFactory} context={state.audioContext} onPluginReady={onPluginReady} />\n  ], [state.faustFactory, state.faustCompiler, state.audioContext, onPluginReady]);\n\n  useEffect(() => {\n    if (state.cabConvolver && state.allPluginsTailNode && Object.keys(state.allPluginsTailNode as object).length && state.audioContext) {\n      (state.allPluginsTailNode as AudioNode).connect(state.cabConvolver as ConvolverNode).connect(state.audioContext.destination);\n    }\n  }, [state.cabConvolver, state.allPluginsTailNode, state.audioContext]);\n\n  useEffect(() => {\n    if (!streamSource || !audioContext || state.plugins.length !== plugins.length\n      || state.plugins.filter(plugin => !!plugin).length !== plugins.length) {\n      return;\n    }\n\n    resumeAudioContext(audioContext).then(() => {\n      const allPluginsTailNode = [...state.plugins].reverse().reduce((prevPlugin, currentPlugin, index) => {\n        const pluginTailNode = currentPlugin.reduce((prevNode, currentNode, i) => {\n          return i !== 0\n            ? (prevNode as AudioNode).connect(currentNode as AudioNode)\n            : currentNode as AudioNode;\n        }, {});\n\n        return index === 0 ? pluginTailNode : (pluginTailNode as AudioNode).connect(prevPlugin as AudioNode);\n      }, {});\n\n      const firstNode = state.plugins[0][0];\n      (streamSource as AudioNode).connect(firstNode as AudioNode);\n\n      setState(prevState => ({ ...prevState, allPluginsTailNode: allPluginsTailNode as AudioNode }));\n    });\n  }, [state.plugins, plugins.length, streamSource, audioContext]);\n\n  const setPlugins = useCallback((plugins: Array<Array<PluginType>>) => {\n    setState((prevState) => ({\n      ...prevState,\n      plugins,\n    }));\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div>\n        Click <button disabled={!!lineInStreamSource} onClick={initGuitarInputFromLineIn}>here</button> to turn on your guitar input.\n      </div>\n      <div className=\"plugins-wrapper\">\n        <Diagram plugins={plugins} setPlugins={setPlugins} />\n      </div>\n      <Cabinet audioContext={state.audioContext} onCabReady={onCabReady} />\n      <div>\n        <audio controls ref={diAudioRef} onPlay={onDiPlay}>\n          <source src={`${process.env.PUBLIC_URL}/di/LasseMagoDI.mp3`} type=\"audio/mpeg\" />\n        </audio>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","///<reference types=\"@grame/libfaust\" />\nimport { useState, useEffect, useRef } from 'react';\nimport { Knob, Pointer, Arc } from 'rc-knob';\nimport SpeexResampler from 'speex-resampler';\n\nimport { Profile, ProfileProps, profileSize, impulseSize } from './profile';\nimport { stopEventPropagation } from '../../helpers/utils';\n\nexport type nodeType = Faust.FaustMonoNode | AudioNode;\n\ntype propTypes = {\n    index: number, // relative index with other plugins\n    context: AudioContext | null,\n    factory: Faust.MonoFactory | null,\n    compiler: Faust.Compiler | null,\n    onPluginReady: (nodes: nodeType[], index: number) => void,\n};\n\ntype descriptorType = {\n    address: string,\n    index: number,\n    init: number,\n    label: string,\n    max: number,\n    min: number,\n    step: number,\n    type: string,\n};\n\nconst tubeAmpAddr = 'kpp_tubeamp.dsp';\n\nconst getControlsByType = (node: any, ctrlType: string): descriptorType[] => node ? (node).fDescriptor.filter(({ type }: descriptorType) => type === ctrlType) : [];\n\nconst TubeAmp = ({ index, context, factory, compiler, onPluginReady }: propTypes) => {\n    const [node, setNode] = useState<Faust.FaustMonoNode>();\n    const [profile, setProfile] = useState<Profile>();\n    const [resamplerReady, setResamplerReady] = useState<boolean>(false);\n    const fetchRef = useRef(false);\n\n    useEffect(() => {\n        if (!node && factory && context && compiler && !fetchRef.current) {\n            fetchRef.current = true;\n            fetch(process.env.PUBLIC_URL + '/' + tubeAmpAddr).then(resp => resp.text()).then(text => {\n                factory.compileNode(context, 'kpp_tubeamp', compiler, text, '-ftz 2', false, 128).then(faustNode => {\n                    if (faustNode) setNode(faustNode);\n                });\n            });\n        }\n    }, [context, factory, compiler, node, fetchRef]);\n\n    useEffect(() => {\n        SpeexResampler.initPromise.then(() => {\n            setResamplerReady(true);\n        });\n    }, [])\n\n    useEffect(() => {\n        if (context && node && !profile && resamplerReady) {\n            fetch(`${process.env.PUBLIC_URL}/tubeAmp_Profiles/v1.0/Modern Metal.tapf`)\n                .then(response => response.arrayBuffer())\n                .then(buffer => {\n                    // simulating C++ fread\n                    let bufferPosition = 0;\n                    const profileBuffer = buffer.slice(0, profileSize);\n                    bufferPosition = profileSize;\n\n                    // 4 chars 1 byte each\n                    const signature = new Uint8Array(profileBuffer.slice(0, 4));\n                    const testStr = 'TaPf';\n                    // simulating C++ strncmp function for checking profile signature\n                    for (let i = 0; i < testStr.length; i++) {\n                        if (testStr.charCodeAt(i) !== signature[i]) return;\n                    }\n\n                    const profileVersion = new Uint32Array(profileBuffer.slice(4, 8))[0];\n\n                    const profileArr = new Float32Array(profileBuffer);\n\n                    let profile: Profile;\n\n                    profile = profileArr.reduce<object>((prevVal, currentVal, index) =>\n                        Object.assign(prevVal, { [ProfileProps[index]]: currentVal })\n                        , {}) as Profile;\n\n                    profile.signature = testStr;\n                    profile.version = profileVersion;\n\n                    setProfile(profile);\n\n                    const impulseHeader = buffer.slice(bufferPosition, bufferPosition + impulseSize);\n                    bufferPosition += impulseSize;\n\n                    const impulseHeaderArr = new Int32Array(impulseHeader);\n                    const impulseSampleRate = impulseHeaderArr[0];\n                    const impulseSampleCount = impulseHeaderArr[2];\n                    const impulseSamplesSize = impulseSampleCount * 4;\n\n                    const impulseBuffer = buffer.slice(bufferPosition, bufferPosition + impulseSamplesSize);\n                    bufferPosition += impulseSamplesSize;\n\n                    if (impulseBuffer.byteLength !== impulseSamplesSize) {\n                        return;\n                    }\n\n                    const preampConvolver = new ConvolverNode(context);\n\n                    const resampler = new SpeexResampler(1, impulseSampleRate, context.sampleRate, 10);\n                    const bufferArr = new Int16Array(impulseBuffer);\n                    const res = resampler.processChunk(bufferArr as any);\n                    const resampledArr = new Float32Array(res);\n\n                    const audioBuffer = context.createBuffer(1, res.byteLength / 2, context.sampleRate);\n                    const audioData = audioBuffer.getChannelData(0);\n\n                    for (let i = 0; i < audioBuffer.length; i++) {\n                        audioData[i] = resampledArr[i];\n                    }\n\n                    preampConvolver.buffer = audioBuffer;\n\n                    onPluginReady([preampConvolver, node], index);\n                });\n        }\n    }, [context, node, profile, onPluginReady, index, resamplerReady]);\n\n    useEffect(() => {\n        const nentryParams = getControlsByType(node, 'nentry');\n\n        if (profile) {\n            nentryParams.forEach((descriptor) => {\n                node?.setParamValue(descriptor.address, profile[descriptor.label as keyof typeof ProfileProps] as number)\n            });\n        }\n    }, [node, profile])\n\n    if (!node) {\n        return <div>Start audio to load the plugin</div>;\n    }\n\n    const sliderParams = getControlsByType(node, 'vslider');\n\n    const handleChangeControl = (address: string, val: number) => {\n        node.setParamValue(address, val);\n    };\n\n    return (\n        <div className=\"plugin amp-head\">\n            <div className=\"plugin-title\">{(node as any)?.fJSONDsp?.name}</div>\n            <div className=\"knobs-wrapper\" onMouseDown={stopEventPropagation}>\n                {sliderParams.map(({ address, init, label, min, max, step }: descriptorType) => (\n                    <div key={address} className=\"knob\">\n                        <label htmlFor={address}>{label}</label>\n                        <Knob\n                            size={50}\n                            angleOffset={220}\n                            angleRange={280}\n                            min={min}\n                            max={max}\n                            className=\"styledKnob\"\n                            value={init || 0.01} // because it renders incorrectly if 0\n                            onChange={(val: number) => handleChangeControl(address, val)}\n                        >\n                            <Arc\n                                arcWidth={0.75}\n                            />\n                            <circle r=\"20\" cx=\"25\" cy=\"25\" />\n                            <Pointer\n                                width={1}\n                                height={17.5}\n                                radius={5}\n                                type=\"rect\"\n                                color=\"#fff\"\n                            />\n                        </Knob>\n\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n};\n\nexport default TubeAmp;\n","import { useState, useEffect } from 'react';\nimport './Cabinet.css';\n\nconst positions = ['center', 'cone', 'edge'];\nconst irs = ['1on-preshigh', '1on-pres8', '1on-pres5'];\n\ntype PropTypes = {\n    audioContext: AudioContext | null,\n    onCabReady: (cab: ConvolverNode) => void,\n};\n\nconst Cabinet = ({ audioContext, onCabReady }: PropTypes) => {\n    const [position, setPosition] = useState<number>(0);\n\n    const changePosition = () => {\n        setPosition((prevPosition) => {\n            return prevPosition === positions.length - 1 ? 0 : prevPosition + 1;\n        })\n    };\n\n    useEffect(() => {\n        if (audioContext) {\n          fetch(`${process.env.PUBLIC_URL}/ir/${irs[position]}.wav`)\n            .then(response => response.arrayBuffer())\n            .then(buffer => {\n              audioContext.decodeAudioData(buffer, decoded => {\n                const cabConvolver = new ConvolverNode(audioContext);\n                cabConvolver.buffer = decoded;\n    \n                onCabReady(cabConvolver);\n              });\n            })\n        }\n      }, [position, audioContext, onCabReady]);\n\n    return (\n        <div className=\"cabinet\" onClick={changePosition}>\n            <img className=\"speaker\" alt=\"Guitar Speaker\" src={`${process.env.PUBLIC_URL}/speaker.png`} />\n            <img className={`mic mic--${positions[position]}`} alt=\"Microphone\" src={`${process.env.PUBLIC_URL}/shure_sm57.png`} />\n        </div>\n    );\n};\n\nexport default Cabinet;\n","import React from 'react';\nimport { DiagramEngine, PortWidget } from '@projectstorm/react-diagrams';\nimport CustomNodeModel from './CustomNodeModel';\nimport styled from '@emotion/styled'\n\nconst Wrapper = styled.div`\n    .plugin-port {\n        width: 16px;\n        height: 16px;\n        z-index: 10;\n        background: rgba(0, 0, 0, 0.5);\n        border-radius: 8px;\n        cursor: pointer;\n        &:hover {\n            background: rgba(0, 0, 0, 1);\n        }\n        position: absolute;\n        top: 50%;\n\n        &.port-in {\n            left: 0%;\n        }\n        &.port-out {\n            right: 0%;\n        }\n    }\n`;\n\nexport interface CustomWidgetProps {\n    node: CustomNodeModel,\n    engine: DiagramEngine,\n}\n\nclass CustomNodeWidget extends React.Component<CustomWidgetProps>{\n    render() {\n        const InPort = this.props.node.getPort('In');\n        const OutPort = this.props.node.getPort('Out');\n\n        return (<Wrapper>\n            {this.props.node.plugin}\n            {InPort && <PortWidget className=\"plugin-port port-in\" port={InPort} engine={this.props.engine} />}\n            {OutPort && <PortWidget className=\"plugin-port port-out\" port={OutPort} engine={this.props.engine} />}\n        </Wrapper>);\n    }\n};\n\nexport default CustomNodeWidget;\n","import { PathFindingLinkModel } from \"@projectstorm/react-diagrams-routing\";\nimport { DefaultPortModel } from \"@projectstorm/react-diagrams-defaults\";\n\nclass CustomPortModel extends DefaultPortModel {\n    createLinkModel() {\n        return new PathFindingLinkModel();\n    }\n}\n\nexport default CustomPortModel;\n","import { NodeModel, NodeModelGenerics } from '@projectstorm/react-diagrams';\n\nimport CustomPortModel from './CustomPortModel';\n\nexport interface CustomNodeModelGenerics {\n    PLUGIN: any,\n}\n\nclass CustomNodeModel extends NodeModel<NodeModelGenerics & CustomNodeModelGenerics> {\n    plugin: JSX.Element;\n    \n    constructor(plugin: JSX.Element) {\n        super({\n            type: 'plugin',\n        });\n\n        this.addPort(new CustomPortModel(true, 'In', ''));\n        this.addPort(new CustomPortModel(false, 'Out', ''));\n\n        this.plugin = plugin;\n    }\n}\n\nexport default CustomNodeModel;\n","import { AbstractReactFactory, GenerateModelEvent } from '@projectstorm/react-canvas-core';\nimport { DiagramEngine } from '@projectstorm/react-diagrams-core';\n\nimport CustomNodeWidget from './CustomNodeWidget';\nimport CustomNodeModel from './CustomNodeModel';\n\nclass CustomNodeFactory extends AbstractReactFactory<CustomNodeModel, DiagramEngine> {\n    constructor() {\n        super('plugin');\n    }\n\n    generateReactWidget(event: any): JSX.Element {\n        return <CustomNodeWidget engine={this.engine} node={event.model} />;\n    }\n\n    generateModel(event: GenerateModelEvent) {\n        return new CustomNodeModel(<></>);\n    }\n}\n\nexport default CustomNodeFactory;\n","import { useEffect, useState } from 'react';\nimport createEngine, {\n    DefaultLinkModel,\n    DefaultPortModel,\n    DiagramEngine,\n    DagreEngine,\n    DiagramModel,\n    NodeModel,\n    PathFindingLinkFactory,\n    PathFindingLinkModel,\n    PortModel,\n} from '@projectstorm/react-diagrams';\nimport {\n    CanvasWidget,\n    BaseEvent,\n    BaseListener\n} from '@projectstorm/react-canvas-core';\n\nimport './Diagram.css';\nimport CustomNodeFactory from './CustomNodeFactory';\nimport CustomNodeModel from './CustomNodeModel';\n\nconst removePortLinks = (port: PortModel, linkToExclude: PathFindingLinkModel): void => {\n    const links = port.getLinks();\n    if (Object.keys(links).length > 1) {\n        Object.entries(links).forEach((entry) => {\n            const link = entry[1];\n            if (link !== linkToExclude) {\n                link.remove();\n            }\n        });\n    }\n}\n\ntype PropTypes = {\n    plugins: JSX.Element[],\n    setPlugins: Function,\n}\n\nconst Diagram = ({ plugins }: PropTypes) => {\n    const [engine, setEngine] = useState<DiagramEngine>();\n\n    useEffect(() => {\n        const diagramEngine = createEngine({ registerDefaultZoomCanvasAction: false });\n        diagramEngine.getNodeFactories().registerFactory(new CustomNodeFactory());\n        setEngine(diagramEngine);\n    }, []);\n\n    useEffect(() => {\n        if (engine) {\n            const nodes: NodeModel[] = [];\n            const links: DefaultLinkModel[] = [];\n            let node: NodeModel;\n\n            const pathfinding = engine.getLinkFactories().getFactory<PathFindingLinkFactory>(PathFindingLinkFactory.NAME);\n\n            plugins.forEach((plugin, i) => {\n                node = new CustomNodeModel(plugin);\n                nodes.push(node);\n                if (i > 0) {\n                    links.push((nodes[i - 1].getPort('Out') as DefaultPortModel).link(nodes[i].getPort('In') as DefaultPortModel, pathfinding));\n                }\n            });\n\n            const model = new DiagramModel();\n            model.addAll(...nodes, ...links);\n            engine.setModel(model);\n\n            type EventType = BaseEvent & { function: string; link: PathFindingLinkModel; isCreated: boolean; };\n\n            const listener = {\n                eventDidFire: (event: EventType) => {\n                    if (event.function === 'linksUpdated') {\n                        const newLink = event.link;\n                        const sourcePort = newLink.getSourcePort();\n\n                        console.log(model.getLinks());\n\n                        // remove existing links when relinking\n                        removePortLinks(sourcePort, newLink);\n\n                        if (event.isCreated) {\n                            // fired when linking to target port is complete\n                            // disables chaining plugin into itself\n                            newLink.registerListener({\n                                targetPortChanged: (event: any) => {\n                                    if (event.port.getParent() === sourcePort.getParent()) {\n                                        newLink.remove();\n                                    } else {\n                                        removePortLinks(event.port, newLink);\n                                    }\n                                }\n                            })\n                        }\n                    }\n                },\n            };\n\n            model.registerListener(listener as BaseListener);\n\n            const state = engine.getStateMachine().getCurrentState();\n            if (state) {\n                (state as any).dragCanvas.config.allowDrag = false;\n            }\n\n            setTimeout(() => {\n                const dagreEngine = new DagreEngine({\n                    graph: {\n                        rankdir: 'LR',\n                        ranker: 'longest-path',\n                        marginx: 25,\n                        marginy: 25,\n                    },\n                    includeLinks: true\n                });\n\n                dagreEngine.redistribute(model);\n                engine\n                    .getLinkFactories()\n                    .getFactory<PathFindingLinkFactory>(PathFindingLinkFactory.NAME)\n                    .calculateRoutingMatrix();\n\n                engine.repaintCanvas();\n            }, 1000);\n        }\n    }, [plugins, engine]);\n\n    if (!engine || !engine.getModel()) {\n        return null;\n    }\n\n    return <CanvasWidget className=\"canvas\" engine={engine} />;\n}\n\nexport default Diagram;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />\n  // </React.StrictMode>\n  ,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}